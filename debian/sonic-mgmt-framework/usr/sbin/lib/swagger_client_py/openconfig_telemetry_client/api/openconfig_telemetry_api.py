# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openconfig_telemetry_client.api_client import ApiClient


class OpenconfigTelemetryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(self, group_id, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(self, sensor_group_id, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(self, sensor_group_id, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `delete_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system Top level configuration and state for the device's telemetry system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system Top level configuration and state for the device's telemetry system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_destination_groups(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_destination_groups  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_destination_groups Top level container for destination group configuration and state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_destination_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_destination_groups  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_destination_groups Top level container for destination group configuration and state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_destination_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group(self, group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations(self, group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations The destination container lists the destination information such as IP address and port of the telemetry messages from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations The destination container lists the destination information such as IP address and port of the telemetry messages from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `delete_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_sensor_groups(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_sensor_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(self, sensor_group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(self, sensor_group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths(self, sensor_group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(self, sensor_group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `delete_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/config/exclude-filter', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions This container holds information for both persistent and dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions This container holds information for both persistent and dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions This container holds information relating to dynamic telemetry subscriptions. A dynamic subscription is typically configured through an RPC channel, and does not persist across device restarts, or if the RPC channel is reset or otherwise torn down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions This container holds information relating to dynamic telemetry subscriptions. A dynamic subscription is typically configured through an RPC channel, and does not persist across device restarts, or if the RPC channel is reset or otherwise torn down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/encoding', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/local-source-address', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/originated-qos-marking', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/protocol', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups A subscription may specify destination addresses. If the subscription supplies destination addresses, the network element will be the initiator of the telemetry streaming, sending it to the destination(s) specified.  If the destination set is omitted, the subscription preconfigures certain elements such as paths and sample intervals under a specified subscription ID. In this case, the network element will NOT initiate an outbound connection for telemetry, but will wait for an inbound connection from a network management system.  It is expected that the network management system connecting to the network element will reference the preconfigured subscription ID when initiating a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups A subscription may specify destination addresses. If the subscription supplies destination addresses, the network element will be the initiator of the telemetry streaming, sending it to the destination(s) specified.  If the destination set is omitted, the subscription preconfigures certain elements such as paths and sample intervals under a specified subscription ID. In this case, the network element will NOT initiate an outbound connection for telemetry, but will wait for an inbound connection from a network management system.  It is expected that the network management system connecting to the network element will reference the preconfigured subscription ID when initiating a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(self, name, group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(self, name, group_id, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles A sensor profile is a set of sensor groups or individual sensor paths which are associated with a telemetry subscription. This is the source of the telemetry data for the subscription to send to the defined collectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles A sensor profile is a set of sensor groups or individual sensor paths which are associated with a telemetry subscription. This is the source of the telemetry data for the subscription to send to the defined collectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(self, name, sensor_group, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval(self, name, sensor_group, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/heartbeat-interval', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(self, name, sensor_group, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/sample-interval', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant(self, name, sensor_group, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant  # noqa: E501

        OperationId: delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `delete_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/suppress-redundant', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(self, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(self, group_id, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(self, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription(self, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription List representation of telemetry subscriptions that are configured via an inline RPC, otherwise known as dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription List representation of telemetry subscriptions that are configured via an inline RPC, otherwise known as dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path(self, id, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_list_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/sensor-paths/sensor-path', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(self, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system Top level configuration and state for the device's telemetry system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system Top level configuration and state for the device's telemetry system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups Top level container for destination group configuration and state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups Top level container for destination group configuration and state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config Top level config container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config Top level config container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations The destination container lists the destination information such as IP address and port of the telemetry messages from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations The destination container lists the destination information such as IP address and port of the telemetry messages from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config Configuration parameters relating to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config Configuration parameters relating to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state State information associated with telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_with_http_info(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state State information associated with telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_with_http_info(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address IP address of the telemetry stream destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationStateDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address_with_http_info(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address IP address of the telemetry stream destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address_with_http_info(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationStateDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}/state/destination-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationStateDestinationAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port Protocol (udp or tcp) port number for the telemetry stream destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationStateDestinationPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port_with_http_info(group_id, destination_address, destination_port, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port_with_http_info(self, group_id, destination_address, destination_port, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port Protocol (udp or tcp) port number for the telemetry stream destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port_with_http_info(group_id, destination_address, destination_port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationStateDestinationPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_state_destination_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}/state/destination-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationStateDestinationPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state Top level state container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state Top level state container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id Unique identifier for destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupStateGroupId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id Unique identifier for destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :return: GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupStateGroupId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_destination_groups_destination_group_state_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/state/group-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupStateGroupId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config Configuration parameters relating to the telemetry sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config Configuration parameters relating to the telemetry sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPaths
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPaths
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPaths',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfigExcludeFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfigExcludeFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/config/exclude-filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfigExcludeFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_with_http_info(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_with_http_info(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathStateExcludeFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter_with_http_info(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter_with_http_info(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathStateExcludeFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_exclude_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/state/exclude-filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathStateExcludeFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path Path to a section of operational state of interest (the sensor).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathStatePath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path_with_http_info(sensor_group_id, path, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path_with_http_info(self, sensor_group_id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path Path to a section of operational state of interest (the sensor).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path_with_http_info(sensor_group_id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathStatePath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_state_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/state/path', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathStatePath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state State information relating to the telemetry sensor group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_with_http_info(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state State information relating to the telemetry sensor group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_with_http_info(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id Name or identifier for the sensor group itself. Will be referenced by other configuration specifying a sensor group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupStateSensorGroupId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id_with_http_info(sensor_group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id_with_http_info(self, sensor_group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id Name or identifier for the sensor group itself. Will be referenced by other configuration specifying a sensor group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id_with_http_info(sensor_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupStateSensorGroupId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `get_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_state_sensor_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/state/sensor-group-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupStateSensorGroupId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions This container holds information for both persistent and dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions This container holds information for both persistent and dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions This container holds information relating to dynamic telemetry subscriptions. A dynamic subscription is typically configured through an RPC channel, and does not persist across device restarts, or if the RPC channel is reset or otherwise torn down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions This container holds information relating to dynamic telemetry subscriptions. A dynamic subscription is typically configured through an RPC channel, and does not persist across device restarts, or if the RPC channel is reset or otherwise torn down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription List representation of telemetry subscriptions that are configured via an inline RPC, otherwise known as dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription List representation of telemetry subscriptions that are configured via an inline RPC, otherwise known as dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPaths
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPaths
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/sensor-paths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPaths',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path(self, id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path(id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_with_http_info(id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_with_http_info(id, path, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_with_http_info(self, id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_with_http_info(id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/sensor-paths/sensor-path={path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state(self, id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state State information for a dynamic subscription's paths of interest  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state(id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPathState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_with_http_info(id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_with_http_info(id, path, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_with_http_info(self, id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state State information for a dynamic subscription's paths of interest  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_with_http_info(id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPathState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/sensor-paths/sensor-path={path}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPathState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter(self, id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter(id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPathStateExcludeFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter_with_http_info(id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter_with_http_info(id, path, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter_with_http_info(self, id, path, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter_with_http_info(id, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str path: Reference to the path of interest (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPathStateExcludeFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_sensor_paths_sensor_path_state_exclude_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/sensor-paths/sensor-path={path}/state/exclude-filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionSensorPathsSensorPathStateExcludeFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state State information relating to dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state State information relating to dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address IP address of the telemetry stream destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address IP address of the telemetry stream destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateDestinationAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/state/destination-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateDestinationAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port Protocol (udp or tcp) port number for the telemetry stream destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateDestinationPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port Protocol (udp or tcp) port number for the telemetry stream destination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateDestinationPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_destination_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/state/destination-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateDestinationPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateEncoding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateEncoding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_encoding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/state/encoding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateEncoding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateHeartbeatInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateHeartbeatInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_heartbeat_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/state/heartbeat-interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateHeartbeatInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateOriginatedQosMarking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateOriginatedQosMarking
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_originated_qos_marking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/state/originated-qos-marking', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateOriginatedQosMarking',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/state/protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateSampleInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateSampleInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_sample_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/state/sample-interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateSampleInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateSuppressRedundant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateSuppressRedundant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_dynamic_subscription_state_suppress_redundant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription={id}/state/suppress-redundant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptionsDynamicSubscriptionStateSuppressRedundant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config Config parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config Config parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigEncoding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigEncoding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/encoding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigEncoding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/local-source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigOriginatedQosMarking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigOriginatedQosMarking
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/originated-qos-marking', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigOriginatedQosMarking',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups A subscription may specify destination addresses. If the subscription supplies destination addresses, the network element will be the initiator of the telemetry streaming, sending it to the destination(s) specified.  If the destination set is omitted, the subscription preconfigures certain elements such as paths and sample intervals under a specified subscription ID. In this case, the network element will NOT initiate an outbound connection for telemetry, but will wait for an inbound connection from a network management system.  It is expected that the network management system connecting to the network element will reference the preconfigured subscription ID when initiating a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups A subscription may specify destination addresses. If the subscription supplies destination addresses, the network element will be the initiator of the telemetry streaming, sending it to the destination(s) specified.  If the destination set is omitted, the subscription preconfigures certain elements such as paths and sample intervals under a specified subscription ID. In this case, the network element will NOT initiate an outbound connection for telemetry, but will wait for an inbound connection from a network management system.  It is expected that the network management system connecting to the network element will reference the preconfigured subscription ID when initiating a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(self, name, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(self, name, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config(self, name, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config Configuration parameters related to telemetry destinations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(self, name, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config Configuration parameters related to telemetry destinations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state(self, name, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state State information related to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_with_http_info(name, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_with_http_info(name, group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_with_http_info(self, name, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state State information related to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_with_http_info(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id(self, name, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id The destination group id references a reusable group of destination addresses and ports for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupStateGroupId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id_with_http_info(name, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id_with_http_info(name, group_id, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id_with_http_info(self, name, group_id, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id The destination group id references a reusable group of destination addresses and ports for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id_with_http_info(name, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupStateGroupId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_state_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}/state/group-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupStateGroupId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles A sensor profile is a set of sensor groups or individual sensor paths which are associated with a telemetry subscription. This is the source of the telemetry data for the subscription to send to the defined collectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles A sensor profile is a set of sensor groups or individual sensor paths which are associated with a telemetry subscription. This is the source of the telemetry data for the subscription to send to the defined collectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config Configuration parameters related to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config Configuration parameters related to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigHeartbeatInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigHeartbeatInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/heartbeat-interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigHeartbeatInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSampleInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSampleInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/sample-interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSampleInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSuppressRedundant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSuppressRedundant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/suppress-redundant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSuppressRedundant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state State information relating to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state State information relating to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateHeartbeatInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateHeartbeatInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_heartbeat_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/state/heartbeat-interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateHeartbeatInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateSampleInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateSampleInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sample_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/state/sample-interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateSampleInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group Reference to the sensor group which is used in the profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateSensorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group Reference to the sensor group which is used in the profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateSensorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_sensor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/state/sensor-group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateSensorGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateSuppressRedundant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant_with_http_info(name, sensor_group, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant_with_http_info(self, name, sensor_group, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant_with_http_info(name, sensor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateSuppressRedundant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_state_suppress_redundant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/state/suppress-redundant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileStateSuppressRedundant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state State parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state State parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateEncoding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateEncoding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_encoding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/state/encoding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateEncoding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id System generated identifer of the telemetry subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id System generated identifer of the telemetry subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/state/id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateLocalSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateLocalSourceAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_local_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/state/local-source-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateLocalSourceAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name User configured identifier of the telemetry subscription. This value is used primarily for subscriptions configured locally on the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name User configured identifier of the telemetry subscription. This value is used primarily for subscriptions configured locally on the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateOriginatedQosMarking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateOriginatedQosMarking
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_originated_qos_marking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/state/originated-qos-marking', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateOriginatedQosMarking',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol  # noqa: E501

        OperationId: get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :return: GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_state_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/state/protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionStateProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(self, group_id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PatchListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PatchListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PatchListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PatchListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system Top level configuration and state for the device's telemetry system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystem body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system Top level configuration and state for the device's telemetry system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystem body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_destination_groups(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups Top level container for destination group configuration and state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups Top level container for destination group configuration and state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_destination_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group(self, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config(self, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config Top level config container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config Top level config container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations(self, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations The destination container lists the destination information such as IP address and port of the telemetry messages from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinations body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations The destination container lists the destination information such as IP address and port of the telemetry messages from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinations body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config Configuration parameters relating to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config Configuration parameters relating to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PatchOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_sensor_groups(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_sensor_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config Configuration parameters relating to the telemetry sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config Configuration parameters relating to the telemetry sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPaths body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPaths body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfigExcludeFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfigExcludeFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/config/exclude-filter', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions This container holds information for both persistent and dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions This container holds information for both persistent and dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions This container holds information relating to dynamic telemetry subscriptions. A dynamic subscription is typically configured through an RPC channel, and does not persist across device restarts, or if the RPC channel is reset or otherwise torn down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions This container holds information relating to dynamic telemetry subscriptions. A dynamic subscription is typically configured through an RPC channel, and does not persist across device restarts, or if the RPC channel is reset or otherwise torn down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config Config parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config Config parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigEncoding body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigEncoding body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/encoding', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/local-source-address', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigOriginatedQosMarking body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigOriginatedQosMarking body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/originated-qos-marking', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/protocol', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups A subscription may specify destination addresses. If the subscription supplies destination addresses, the network element will be the initiator of the telemetry streaming, sending it to the destination(s) specified.  If the destination set is omitted, the subscription preconfigures certain elements such as paths and sample intervals under a specified subscription ID. In this case, the network element will NOT initiate an outbound connection for telemetry, but will wait for an inbound connection from a network management system.  It is expected that the network management system connecting to the network element will reference the preconfigured subscription ID when initiating a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups A subscription may specify destination addresses. If the subscription supplies destination addresses, the network element will be the initiator of the telemetry streaming, sending it to the destination(s) specified.  If the destination set is omitted, the subscription preconfigures certain elements such as paths and sample intervals under a specified subscription ID. In this case, the network element will NOT initiate an outbound connection for telemetry, but will wait for an inbound connection from a network management system.  It is expected that the network management system connecting to the network element will reference the preconfigured subscription ID when initiating a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(self, name, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(self, name, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config(self, name, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config Configuration parameters related to telemetry destinations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(self, name, group_id, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config Configuration parameters related to telemetry destinations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles A sensor profile is a set of sensor groups or individual sensor paths which are associated with a telemetry subscription. This is the source of the telemetry data for the subscription to send to the defined collectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfiles body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles A sensor profile is a set of sensor groups or individual sensor paths which are associated with a telemetry subscription. This is the source of the telemetry data for the subscription to send to the defined collectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfiles body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config Configuration parameters related to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config Configuration parameters related to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigHeartbeatInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigHeartbeatInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/heartbeat-interval', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSampleInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSampleInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/sample-interval', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSuppressRedundant body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant  # noqa: E501

        OperationId: patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PatchOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSuppressRedundant body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/suppress-redundant', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(self, group_id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PostListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PostListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PostListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PostListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PostListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PostListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PostListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PostListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config(self, group_id, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config Top level config container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PostOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config Top level config container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PostOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config Configuration parameters relating to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PostOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config Configuration parameters relating to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PostOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_sensor_groups(self, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_sensor_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigTelemetryTelemetrySystemSensorGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigTelemetryTelemetrySystemSensorGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_sensor_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_sensor_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config Configuration parameters relating to the telemetry sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PostOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config Configuration parameters relating to the telemetry sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PostOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PostOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PostOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PostOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfigExcludeFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PostOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfigExcludeFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(self, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config Config parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config Config parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config(self, name, group_id, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config Configuration parameters related to telemetry destinations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(self, name, group_id, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config Configuration parameters related to telemetry destinations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config Configuration parameters related to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config Configuration parameters related to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSampleInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSampleInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(self, group_id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PutListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PutListOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PutListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PutListOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutListOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system Top level configuration and state for the device's telemetry system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystem body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system Top level configuration and state for the device's telemetry system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystem body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_destination_groups(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups Top level container for destination group configuration and state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups Top level container for destination group configuration and state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_destination_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_destination_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group(self, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group List of destination-groups. Destination groups allow the reuse of common telemetry destinations across the telemetry configuration. An operator references a set of destinations via the configurable destination-group-identifier.  A destination group may contain one or more telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config(self, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config Top level config container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config Top level config container for destination groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations(self, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations The destination container lists the destination information such as IP address and port of the telemetry messages from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinations body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations The destination container lists the destination information such as IP address and port of the telemetry messages from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinations body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination List of telemetry stream destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_with_http_info(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestination body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config Configuration parameters relating to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(self, group_id, destination_address, destination_port, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config Configuration parameters relating to telemetry destinations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config_with_http_info(group_id, destination_address, destination_port, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Unique identifier for the destination group (required)
        :param str destination_address: Reference to the destination address of the telemetry stream (required)
        :param int destination_port: Reference to the port number of the stream destination (required)
        :param PutOpenconfigTelemetryTelemetrySystemDestinationGroupsDestinationGroupDestinationsDestinationConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'destination_address', 'destination_port', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'destination_address' is set
        if ('destination_address' not in params or
                params['destination_address'] is None):
            raise ValueError("Missing the required parameter `destination_address` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'destination_port' is set
        if ('destination_port' not in params or
                params['destination_port'] is None):
            raise ValueError("Missing the required parameter `destination_port` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_destination_groups_destination_group_destinations_destination_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'destination_address' in params:
            path_params['destination-address'] = params['destination_address']  # noqa: E501
        if 'destination_port' in params:
            path_params['destination-port'] = params['destination_port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/destination-groups/destination-group={group-id}/destinations/destination={destination-address},{destination-port}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_sensor_groups(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups Top level container for sensor-groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_sensor_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group List of telemetry sensory groups on the local system, where a sensor grouping represents a resuable grouping of multiple paths and exclude filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config Configuration parameters relating to the telemetry sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config Configuration parameters relating to the telemetry sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPaths body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(self, sensor_group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths Top level container to hold a set of sensor paths grouped together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_with_http_info(sensor_group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPaths body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path List of paths in the model which together comprise a sensor grouping. Filters for each path to exclude items are also provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_with_http_info(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPath body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config Configuration parameters to configure a set of data model paths as a sensor grouping  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_with_http_info(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfigExcludeFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(self, sensor_group_id, path, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter Filter to exclude certain values out of the state values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter_with_http_info(sensor_group_id, path, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_group_id: Reference to the name or identifier of the sensor grouping (required)
        :param str path: Reference to the path of interest (required)
        :param PutOpenconfigTelemetryTelemetrySystemSensorGroupsSensorGroupSensorPathsSensorPathConfigExcludeFilter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_group_id', 'path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_group_id' is set
        if ('sensor_group_id' not in params or
                params['sensor_group_id'] is None):
            raise ValueError("Missing the required parameter `sensor_group_id` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_sensor_groups_sensor_group_sensor_paths_sensor_path_config_exclude_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_group_id' in params:
            path_params['sensor-group-id'] = params['sensor_group_id']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/sensor-groups/sensor-group={sensor-group-id}/sensor-paths/sensor-path={path}/config/exclude-filter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions This container holds information for both persistent and dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions This container holds information for both persistent and dynamic telemetry subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions This container holds information relating to dynamic telemetry subscriptions. A dynamic subscription is typically configured through an RPC channel, and does not persist across device restarts, or if the RPC channel is reset or otherwise torn down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions This container holds information relating to dynamic telemetry subscriptions. A dynamic subscription is typically configured through an RPC channel, and does not persist across device restarts, or if the RPC channel is reset or otherwise torn down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsDynamicSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_dynamic_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/dynamic-subscriptions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions This container holds information relating to persistent telemetry subscriptions. A persistent telemetry subscription is configued locally on the device through configuration, and is persistent across device restarts or other redundancy changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptions body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription List of telemetry subscriptions. A telemetry subscription consists of a set of collection destinations, stream attributes, and associated paths to state information in the model (sensor data)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config Config parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config Config parameters relating to the telemetry subscriptions on the local device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigEncoding body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding Selection of the specific encoding or RPC framework for telemetry messages to and from the network element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigEncoding body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/encoding', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address The IP address which will be the source of packets from the device to a telemetry collector destination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/local-source-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigOriginatedQosMarking body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking DSCP marking of packets generated by the telemetry subsystem on the network device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigOriginatedQosMarking body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/originated-qos-marking', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol Selection of the transport protocol for the telemetry stream.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/config/protocol', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups A subscription may specify destination addresses. If the subscription supplies destination addresses, the network element will be the initiator of the telemetry streaming, sending it to the destination(s) specified.  If the destination set is omitted, the subscription preconfigures certain elements such as paths and sample intervals under a specified subscription ID. In this case, the network element will NOT initiate an outbound connection for telemetry, but will wait for an inbound connection from a network management system.  It is expected that the network management system connecting to the network element will reference the preconfigured subscription ID when initiating a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups A subscription may specify destination addresses. If the subscription supplies destination addresses, the network element will be the initiator of the telemetry streaming, sending it to the destination(s) specified.  If the destination set is omitted, the subscription preconfigures certain elements such as paths and sample intervals under a specified subscription ID. In this case, the network element will NOT initiate an outbound connection for telemetry, but will wait for an inbound connection from a network management system.  It is expected that the network management system connecting to the network element will reference the preconfigured subscription ID when initiating a subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(self, name, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(self, name, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group Identifier of the previously defined destination group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_with_http_info(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroup body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config(self, name, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config Configuration parameters related to telemetry destinations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(self, name, group_id, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config Configuration parameters related to telemetry destinations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config_with_http_info(name, group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str group_id: The destination group id references a configured group of destinations for the telemetry stream. (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionDestinationGroupsDestinationGroupConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_destination_groups_destination_group_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/destination-groups/destination-group={group-id}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles A sensor profile is a set of sensor groups or individual sensor paths which are associated with a telemetry subscription. This is the source of the telemetry data for the subscription to send to the defined collectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfiles body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles A sensor profile is a set of sensor groups or individual sensor paths which are associated with a telemetry subscription. This is the source of the telemetry data for the subscription to send to the defined collectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfiles body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile List of telemetry sensor groups used in the subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfile body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config Configuration parameters related to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config Configuration parameters related to the sensor profile for a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigHeartbeatInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigHeartbeatInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_heartbeat_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/heartbeat-interval', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSampleInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSampleInterval body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_sample_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/sample-interval', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSuppressRedundant body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(self, name, sensor_group, body, **kwargs):  # noqa: E501
        """put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant  # noqa: E501

        OperationId: put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant_with_http_info(name, sensor_group, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created (required)
        :param str sensor_group: Reference to the telemetry sensor group name (required)
        :param PutOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionSensorProfilesSensorProfileConfigSuppressRedundant body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sensor_group', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501
        # verify the required parameter 'sensor_group' is set
        if ('sensor_group' not in params or
                params['sensor_group'] is None):
            raise ValueError("Missing the required parameter `sensor_group` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_sensor_profiles_sensor_profile_config_suppress_redundant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'sensor_group' in params:
            path_params['sensor-group'] = params['sensor_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-telemetry:telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription={name}/sensor-profiles/sensor-profile={sensor-group}/config/suppress-redundant', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
