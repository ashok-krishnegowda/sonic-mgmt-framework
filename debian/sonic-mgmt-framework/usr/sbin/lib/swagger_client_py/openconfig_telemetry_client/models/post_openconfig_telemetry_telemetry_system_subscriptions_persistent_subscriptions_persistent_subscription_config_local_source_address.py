# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_telemetry_client.models.openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_encoding import OpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigEncoding  # noqa: F401,E501
from openconfig_telemetry_client.models.openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_local_source_address import OpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress  # noqa: F401,E501
from openconfig_telemetry_client.models.openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_originated_qos_marking import OpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigOriginatedQosMarking  # noqa: F401,E501
from openconfig_telemetry_client.models.openconfig_telemetry_telemetry_system_subscriptions_persistent_subscriptions_persistent_subscription_config_protocol import OpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigProtocol  # noqa: F401,E501


class PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_telemetrylocal_source_address': 'str',
        'openconfig_telemetryoriginated_qos_marking': 'int',
        'openconfig_telemetryprotocol': 'str',
        'openconfig_telemetryencoding': 'str'
    }

    attribute_map = {
        'openconfig_telemetrylocal_source_address': 'openconfig-telemetry:local-source-address',
        'openconfig_telemetryoriginated_qos_marking': 'openconfig-telemetry:originated-qos-marking',
        'openconfig_telemetryprotocol': 'openconfig-telemetry:protocol',
        'openconfig_telemetryencoding': 'openconfig-telemetry:encoding'
    }

    def __init__(self, openconfig_telemetrylocal_source_address=None, openconfig_telemetryoriginated_qos_marking=None, openconfig_telemetryprotocol=None, openconfig_telemetryencoding=None):  # noqa: E501
        """PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress - a model defined in Swagger"""  # noqa: E501

        self._openconfig_telemetrylocal_source_address = None
        self._openconfig_telemetryoriginated_qos_marking = None
        self._openconfig_telemetryprotocol = None
        self._openconfig_telemetryencoding = None
        self.discriminator = None

        if openconfig_telemetrylocal_source_address is not None:
            self.openconfig_telemetrylocal_source_address = openconfig_telemetrylocal_source_address
        if openconfig_telemetryoriginated_qos_marking is not None:
            self.openconfig_telemetryoriginated_qos_marking = openconfig_telemetryoriginated_qos_marking
        if openconfig_telemetryprotocol is not None:
            self.openconfig_telemetryprotocol = openconfig_telemetryprotocol
        if openconfig_telemetryencoding is not None:
            self.openconfig_telemetryencoding = openconfig_telemetryencoding

    @property
    def openconfig_telemetrylocal_source_address(self):
        """Gets the openconfig_telemetrylocal_source_address of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501


        :return: The openconfig_telemetrylocal_source_address of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_telemetrylocal_source_address

    @openconfig_telemetrylocal_source_address.setter
    def openconfig_telemetrylocal_source_address(self, openconfig_telemetrylocal_source_address):
        """Sets the openconfig_telemetrylocal_source_address of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.


        :param openconfig_telemetrylocal_source_address: The openconfig_telemetrylocal_source_address of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501
        :type: str
        """

        self._openconfig_telemetrylocal_source_address = openconfig_telemetrylocal_source_address

    @property
    def openconfig_telemetryoriginated_qos_marking(self):
        """Gets the openconfig_telemetryoriginated_qos_marking of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501


        :return: The openconfig_telemetryoriginated_qos_marking of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501
        :rtype: int
        """
        return self._openconfig_telemetryoriginated_qos_marking

    @openconfig_telemetryoriginated_qos_marking.setter
    def openconfig_telemetryoriginated_qos_marking(self, openconfig_telemetryoriginated_qos_marking):
        """Sets the openconfig_telemetryoriginated_qos_marking of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.


        :param openconfig_telemetryoriginated_qos_marking: The openconfig_telemetryoriginated_qos_marking of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501
        :type: int
        """

        self._openconfig_telemetryoriginated_qos_marking = openconfig_telemetryoriginated_qos_marking

    @property
    def openconfig_telemetryprotocol(self):
        """Gets the openconfig_telemetryprotocol of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501


        :return: The openconfig_telemetryprotocol of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_telemetryprotocol

    @openconfig_telemetryprotocol.setter
    def openconfig_telemetryprotocol(self, openconfig_telemetryprotocol):
        """Sets the openconfig_telemetryprotocol of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.


        :param openconfig_telemetryprotocol: The openconfig_telemetryprotocol of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501
        :type: str
        """

        self._openconfig_telemetryprotocol = openconfig_telemetryprotocol

    @property
    def openconfig_telemetryencoding(self):
        """Gets the openconfig_telemetryencoding of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501


        :return: The openconfig_telemetryencoding of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501
        :rtype: str
        """
        return self._openconfig_telemetryencoding

    @openconfig_telemetryencoding.setter
    def openconfig_telemetryencoding(self, openconfig_telemetryencoding):
        """Sets the openconfig_telemetryencoding of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.


        :param openconfig_telemetryencoding: The openconfig_telemetryencoding of this PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress.  # noqa: E501
        :type: str
        """

        self._openconfig_telemetryencoding = openconfig_telemetryencoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostOpenconfigTelemetryTelemetrySystemSubscriptionsPersistentSubscriptionsPersistentSubscriptionConfigLocalSourceAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
