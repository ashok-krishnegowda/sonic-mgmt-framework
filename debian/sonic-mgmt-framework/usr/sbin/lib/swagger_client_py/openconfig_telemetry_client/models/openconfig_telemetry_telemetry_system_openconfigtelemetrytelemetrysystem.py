# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_telemetry_client.models.openconfig_telemetry_telemetry_system_openconfigtelemetrytelemetrysystem_destinationgroups import OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemDestinationgroups  # noqa: F401,E501
from openconfig_telemetry_client.models.openconfig_telemetry_telemetry_system_openconfigtelemetrytelemetrysystem_sensorgroups import OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroups  # noqa: F401,E501
from openconfig_telemetry_client.models.openconfig_telemetry_telemetry_system_openconfigtelemetrytelemetrysystem_subscriptions import OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptions  # noqa: F401,E501


class OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sensor_groups': 'OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroups',
        'destination_groups': 'OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemDestinationgroups',
        'subscriptions': 'OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptions'
    }

    attribute_map = {
        'sensor_groups': 'sensor-groups',
        'destination_groups': 'destination-groups',
        'subscriptions': 'subscriptions'
    }

    def __init__(self, sensor_groups=None, destination_groups=None, subscriptions=None):  # noqa: E501
        """OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem - a model defined in Swagger"""  # noqa: E501

        self._sensor_groups = None
        self._destination_groups = None
        self._subscriptions = None
        self.discriminator = None

        if sensor_groups is not None:
            self.sensor_groups = sensor_groups
        if destination_groups is not None:
            self.destination_groups = destination_groups
        if subscriptions is not None:
            self.subscriptions = subscriptions

    @property
    def sensor_groups(self):
        """Gets the sensor_groups of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.  # noqa: E501


        :return: The sensor_groups of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.  # noqa: E501
        :rtype: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroups
        """
        return self._sensor_groups

    @sensor_groups.setter
    def sensor_groups(self, sensor_groups):
        """Sets the sensor_groups of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.


        :param sensor_groups: The sensor_groups of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.  # noqa: E501
        :type: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroups
        """

        self._sensor_groups = sensor_groups

    @property
    def destination_groups(self):
        """Gets the destination_groups of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.  # noqa: E501


        :return: The destination_groups of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.  # noqa: E501
        :rtype: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemDestinationgroups
        """
        return self._destination_groups

    @destination_groups.setter
    def destination_groups(self, destination_groups):
        """Sets the destination_groups of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.


        :param destination_groups: The destination_groups of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.  # noqa: E501
        :type: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemDestinationgroups
        """

        self._destination_groups = destination_groups

    @property
    def subscriptions(self):
        """Gets the subscriptions of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.  # noqa: E501


        :return: The subscriptions of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.  # noqa: E501
        :rtype: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptions
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.


        :param subscriptions: The subscriptions of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem.  # noqa: E501
        :type: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptions
        """

        self._subscriptions = subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
