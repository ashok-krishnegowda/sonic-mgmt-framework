# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'local_source_address': 'str',
        'originated_qos_marking': 'int',
        'protocol': 'str',
        'encoding': 'str'
    }

    attribute_map = {
        'name': 'name',
        'local_source_address': 'local-source-address',
        'originated_qos_marking': 'originated-qos-marking',
        'protocol': 'protocol',
        'encoding': 'encoding'
    }

    def __init__(self, name=None, local_source_address=None, originated_qos_marking=None, protocol=None, encoding=None):  # noqa: E501
        """OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._local_source_address = None
        self._originated_qos_marking = None
        self._protocol = None
        self._encoding = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if local_source_address is not None:
            self.local_source_address = local_source_address
        if originated_qos_marking is not None:
            self.originated_qos_marking = originated_qos_marking
        if protocol is not None:
            self.protocol = protocol
        if encoding is not None:
            self.encoding = encoding

    @property
    def name(self):
        """Gets the name of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501


        :return: The name of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.


        :param name: The name of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def local_source_address(self):
        """Gets the local_source_address of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501


        :return: The local_source_address of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :rtype: str
        """
        return self._local_source_address

    @local_source_address.setter
    def local_source_address(self, local_source_address):
        """Sets the local_source_address of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.


        :param local_source_address: The local_source_address of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :type: str
        """

        self._local_source_address = local_source_address

    @property
    def originated_qos_marking(self):
        """Gets the originated_qos_marking of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501


        :return: The originated_qos_marking of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :rtype: int
        """
        return self._originated_qos_marking

    @originated_qos_marking.setter
    def originated_qos_marking(self, originated_qos_marking):
        """Sets the originated_qos_marking of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.


        :param originated_qos_marking: The originated_qos_marking of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :type: int
        """

        self._originated_qos_marking = originated_qos_marking

    @property
    def protocol(self):
        """Gets the protocol of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501


        :return: The protocol of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.


        :param protocol: The protocol of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def encoding(self):
        """Gets the encoding of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501


        :return: The encoding of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.


        :param encoding: The encoding of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
