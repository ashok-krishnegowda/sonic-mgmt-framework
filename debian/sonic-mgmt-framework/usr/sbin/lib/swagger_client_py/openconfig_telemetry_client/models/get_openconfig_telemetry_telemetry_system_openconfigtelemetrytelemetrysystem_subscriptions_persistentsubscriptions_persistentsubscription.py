# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_telemetry_client.models.get_openconfig_telemetry_telemetry_system_openconfigtelemetrytelemetrysystem_subscriptions_persistentsubscriptions_destinationgroups import GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsDestinationgroups  # noqa: F401,E501
from openconfig_telemetry_client.models.get_openconfig_telemetry_telemetry_system_openconfigtelemetrytelemetrysystem_subscriptions_persistentsubscriptions_sensorprofiles import GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofiles  # noqa: F401,E501
from openconfig_telemetry_client.models.get_openconfig_telemetry_telemetry_system_openconfigtelemetrytelemetrysystem_subscriptions_persistentsubscriptions_state import GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsState  # noqa: F401,E501
from openconfig_telemetry_client.models.openconfig_telemetry_telemetry_system_openconfigtelemetrytelemetrysystem_subscriptions_persistentsubscriptions_config import OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig  # noqa: F401,E501


class GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'config': 'OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig',
        'state': 'GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsState',
        'sensor_profiles': 'GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofiles',
        'destination_groups': 'GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsDestinationgroups'
    }

    attribute_map = {
        'name': 'name',
        'config': 'config',
        'state': 'state',
        'sensor_profiles': 'sensor-profiles',
        'destination_groups': 'destination-groups'
    }

    def __init__(self, name=None, config=None, state=None, sensor_profiles=None, destination_groups=None):  # noqa: E501
        """GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._config = None
        self._state = None
        self._sensor_profiles = None
        self._destination_groups = None
        self.discriminator = None

        self.name = name
        if config is not None:
            self.config = config
        if state is not None:
            self.state = state
        if sensor_profiles is not None:
            self.sensor_profiles = sensor_profiles
        if destination_groups is not None:
            self.destination_groups = destination_groups

    @property
    def name(self):
        """Gets the name of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501


        :return: The name of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.


        :param name: The name of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def config(self):
        """Gets the config of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501


        :return: The config of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :rtype: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.


        :param config: The config of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :type: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsConfig
        """

        self._config = config

    @property
    def state(self):
        """Gets the state of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501


        :return: The state of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :rtype: GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.


        :param state: The state of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :type: GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsState
        """

        self._state = state

    @property
    def sensor_profiles(self):
        """Gets the sensor_profiles of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501


        :return: The sensor_profiles of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :rtype: GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofiles
        """
        return self._sensor_profiles

    @sensor_profiles.setter
    def sensor_profiles(self, sensor_profiles):
        """Sets the sensor_profiles of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.


        :param sensor_profiles: The sensor_profiles of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :type: GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofiles
        """

        self._sensor_profiles = sensor_profiles

    @property
    def destination_groups(self):
        """Gets the destination_groups of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501


        :return: The destination_groups of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :rtype: GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsDestinationgroups
        """
        return self._destination_groups

    @destination_groups.setter
    def destination_groups(self, destination_groups):
        """Sets the destination_groups of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.


        :param destination_groups: The destination_groups of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription.  # noqa: E501
        :type: GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsDestinationgroups
        """

        self._destination_groups = destination_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsPersistentsubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
