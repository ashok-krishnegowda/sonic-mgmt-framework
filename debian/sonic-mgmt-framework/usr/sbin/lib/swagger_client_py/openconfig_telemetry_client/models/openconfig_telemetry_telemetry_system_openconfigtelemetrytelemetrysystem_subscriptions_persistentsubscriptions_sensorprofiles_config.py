# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sensor_group': 'str',
        'sample_interval': 'int',
        'heartbeat_interval': 'int',
        'suppress_redundant': 'bool'
    }

    attribute_map = {
        'sensor_group': 'sensor-group',
        'sample_interval': 'sample-interval',
        'heartbeat_interval': 'heartbeat-interval',
        'suppress_redundant': 'suppress-redundant'
    }

    def __init__(self, sensor_group=None, sample_interval=None, heartbeat_interval=None, suppress_redundant=None):  # noqa: E501
        """OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig - a model defined in Swagger"""  # noqa: E501

        self._sensor_group = None
        self._sample_interval = None
        self._heartbeat_interval = None
        self._suppress_redundant = None
        self.discriminator = None

        if sensor_group is not None:
            self.sensor_group = sensor_group
        if sample_interval is not None:
            self.sample_interval = sample_interval
        if heartbeat_interval is not None:
            self.heartbeat_interval = heartbeat_interval
        if suppress_redundant is not None:
            self.suppress_redundant = suppress_redundant

    @property
    def sensor_group(self):
        """Gets the sensor_group of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501


        :return: The sensor_group of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501
        :rtype: str
        """
        return self._sensor_group

    @sensor_group.setter
    def sensor_group(self, sensor_group):
        """Sets the sensor_group of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.


        :param sensor_group: The sensor_group of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501
        :type: str
        """

        self._sensor_group = sensor_group

    @property
    def sample_interval(self):
        """Gets the sample_interval of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501


        :return: The sample_interval of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501
        :rtype: int
        """
        return self._sample_interval

    @sample_interval.setter
    def sample_interval(self, sample_interval):
        """Sets the sample_interval of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.


        :param sample_interval: The sample_interval of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501
        :type: int
        """

        self._sample_interval = sample_interval

    @property
    def heartbeat_interval(self):
        """Gets the heartbeat_interval of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501


        :return: The heartbeat_interval of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501
        :rtype: int
        """
        return self._heartbeat_interval

    @heartbeat_interval.setter
    def heartbeat_interval(self, heartbeat_interval):
        """Sets the heartbeat_interval of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.


        :param heartbeat_interval: The heartbeat_interval of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501
        :type: int
        """

        self._heartbeat_interval = heartbeat_interval

    @property
    def suppress_redundant(self):
        """Gets the suppress_redundant of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501


        :return: The suppress_redundant of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_redundant

    @suppress_redundant.setter
    def suppress_redundant(self, suppress_redundant):
        """Sets the suppress_redundant of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.


        :param suppress_redundant: The suppress_redundant of this OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig.  # noqa: E501
        :type: bool
        """

        self._suppress_redundant = suppress_redundant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsPersistentsubscriptionsSensorprofilesConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
