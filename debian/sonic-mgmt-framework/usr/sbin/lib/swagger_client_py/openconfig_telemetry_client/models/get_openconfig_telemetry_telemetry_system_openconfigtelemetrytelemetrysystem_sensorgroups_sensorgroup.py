# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_telemetry_client.models.get_openconfig_telemetry_telemetry_system_openconfigtelemetrytelemetrysystem_sensorgroups_sensorpaths import GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorpaths  # noqa: F401,E501
from openconfig_telemetry_client.models.openconfig_telemetry_telemetry_system_openconfigtelemetrytelemetrysystem_sensorgroups_config import OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsConfig  # noqa: F401,E501


class GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sensor_group_id': 'str',
        'config': 'OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsConfig',
        'state': 'OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsConfig',
        'sensor_paths': 'GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorpaths'
    }

    attribute_map = {
        'sensor_group_id': 'sensor-group-id',
        'config': 'config',
        'state': 'state',
        'sensor_paths': 'sensor-paths'
    }

    def __init__(self, sensor_group_id=None, config=None, state=None, sensor_paths=None):  # noqa: E501
        """GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup - a model defined in Swagger"""  # noqa: E501

        self._sensor_group_id = None
        self._config = None
        self._state = None
        self._sensor_paths = None
        self.discriminator = None

        self.sensor_group_id = sensor_group_id
        if config is not None:
            self.config = config
        if state is not None:
            self.state = state
        if sensor_paths is not None:
            self.sensor_paths = sensor_paths

    @property
    def sensor_group_id(self):
        """Gets the sensor_group_id of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501


        :return: The sensor_group_id of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501
        :rtype: str
        """
        return self._sensor_group_id

    @sensor_group_id.setter
    def sensor_group_id(self, sensor_group_id):
        """Sets the sensor_group_id of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.


        :param sensor_group_id: The sensor_group_id of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501
        :type: str
        """
        if sensor_group_id is None:
            raise ValueError("Invalid value for `sensor_group_id`, must not be `None`")  # noqa: E501

        self._sensor_group_id = sensor_group_id

    @property
    def config(self):
        """Gets the config of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501


        :return: The config of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501
        :rtype: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.


        :param config: The config of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501
        :type: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsConfig
        """

        self._config = config

    @property
    def state(self):
        """Gets the state of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501


        :return: The state of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501
        :rtype: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsConfig
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.


        :param state: The state of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501
        :type: OpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsConfig
        """

        self._state = state

    @property
    def sensor_paths(self):
        """Gets the sensor_paths of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501


        :return: The sensor_paths of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501
        :rtype: GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorpaths
        """
        return self._sensor_paths

    @sensor_paths.setter
    def sensor_paths(self, sensor_paths):
        """Sets the sensor_paths of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.


        :param sensor_paths: The sensor_paths of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup.  # noqa: E501
        :type: GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorpaths
        """

        self._sensor_paths = sensor_paths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSensorgroupsSensorgroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
