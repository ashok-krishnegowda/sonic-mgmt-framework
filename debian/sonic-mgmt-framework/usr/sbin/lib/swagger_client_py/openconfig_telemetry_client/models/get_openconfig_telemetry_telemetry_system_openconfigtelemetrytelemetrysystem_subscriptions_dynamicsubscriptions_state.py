# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'destination_address': 'str',
        'destination_port': 'int',
        'sample_interval': 'int',
        'heartbeat_interval': 'int',
        'suppress_redundant': 'bool',
        'originated_qos_marking': 'int',
        'protocol': 'str',
        'encoding': 'str'
    }

    attribute_map = {
        'id': 'id',
        'destination_address': 'destination-address',
        'destination_port': 'destination-port',
        'sample_interval': 'sample-interval',
        'heartbeat_interval': 'heartbeat-interval',
        'suppress_redundant': 'suppress-redundant',
        'originated_qos_marking': 'originated-qos-marking',
        'protocol': 'protocol',
        'encoding': 'encoding'
    }

    def __init__(self, id=None, destination_address=None, destination_port=None, sample_interval=None, heartbeat_interval=None, suppress_redundant=None, originated_qos_marking=None, protocol=None, encoding=None):  # noqa: E501
        """GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._destination_address = None
        self._destination_port = None
        self._sample_interval = None
        self._heartbeat_interval = None
        self._suppress_redundant = None
        self._originated_qos_marking = None
        self._protocol = None
        self._encoding = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if destination_address is not None:
            self.destination_address = destination_address
        if destination_port is not None:
            self.destination_port = destination_port
        if sample_interval is not None:
            self.sample_interval = sample_interval
        if heartbeat_interval is not None:
            self.heartbeat_interval = heartbeat_interval
        if suppress_redundant is not None:
            self.suppress_redundant = suppress_redundant
        if originated_qos_marking is not None:
            self.originated_qos_marking = originated_qos_marking
        if protocol is not None:
            self.protocol = protocol
        if encoding is not None:
            self.encoding = encoding

    @property
    def id(self):
        """Gets the id of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501


        :return: The id of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.


        :param id: The id of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def destination_address(self):
        """Gets the destination_address of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501


        :return: The destination_address of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.


        :param destination_address: The destination_address of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :type: str
        """

        self._destination_address = destination_address

    @property
    def destination_port(self):
        """Gets the destination_port of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501


        :return: The destination_port of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :rtype: int
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.


        :param destination_port: The destination_port of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :type: int
        """

        self._destination_port = destination_port

    @property
    def sample_interval(self):
        """Gets the sample_interval of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501


        :return: The sample_interval of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :rtype: int
        """
        return self._sample_interval

    @sample_interval.setter
    def sample_interval(self, sample_interval):
        """Sets the sample_interval of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.


        :param sample_interval: The sample_interval of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :type: int
        """

        self._sample_interval = sample_interval

    @property
    def heartbeat_interval(self):
        """Gets the heartbeat_interval of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501


        :return: The heartbeat_interval of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :rtype: int
        """
        return self._heartbeat_interval

    @heartbeat_interval.setter
    def heartbeat_interval(self, heartbeat_interval):
        """Sets the heartbeat_interval of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.


        :param heartbeat_interval: The heartbeat_interval of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :type: int
        """

        self._heartbeat_interval = heartbeat_interval

    @property
    def suppress_redundant(self):
        """Gets the suppress_redundant of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501


        :return: The suppress_redundant of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_redundant

    @suppress_redundant.setter
    def suppress_redundant(self, suppress_redundant):
        """Sets the suppress_redundant of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.


        :param suppress_redundant: The suppress_redundant of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :type: bool
        """

        self._suppress_redundant = suppress_redundant

    @property
    def originated_qos_marking(self):
        """Gets the originated_qos_marking of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501


        :return: The originated_qos_marking of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :rtype: int
        """
        return self._originated_qos_marking

    @originated_qos_marking.setter
    def originated_qos_marking(self, originated_qos_marking):
        """Sets the originated_qos_marking of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.


        :param originated_qos_marking: The originated_qos_marking of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :type: int
        """

        self._originated_qos_marking = originated_qos_marking

    @property
    def protocol(self):
        """Gets the protocol of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501


        :return: The protocol of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.


        :param protocol: The protocol of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def encoding(self):
        """Gets the encoding of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501


        :return: The encoding of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.


        :param encoding: The encoding of this GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOpenconfigTelemetryTelemetrySystemOpenconfigtelemetrytelemetrysystemSubscriptionsDynamicsubscriptionsState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
