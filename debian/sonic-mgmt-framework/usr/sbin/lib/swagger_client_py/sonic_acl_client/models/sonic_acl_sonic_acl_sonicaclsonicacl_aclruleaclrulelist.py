# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aclname': 'str',
        'rulename': 'str',
        'priority': 'int',
        'rule_description': 'str',
        'packet_action': 'str',
        'mirror_action': 'str',
        'ip_type': 'str',
        'ip_protocol': 'int',
        'ether_type': 'str',
        'src_ip': 'str',
        'dst_ip': 'str',
        'src_ipv6': 'str',
        'dst_ipv6': 'str',
        'l4_src_port': 'int',
        'l4_src_port_range': 'str',
        'l4_dst_port': 'int',
        'l4_dst_port_range': 'str',
        'tcp_flags': 'str',
        'dscp': 'int'
    }

    attribute_map = {
        'aclname': 'aclname',
        'rulename': 'rulename',
        'priority': 'PRIORITY',
        'rule_description': 'RULE_DESCRIPTION',
        'packet_action': 'PACKET_ACTION',
        'mirror_action': 'MIRROR_ACTION',
        'ip_type': 'IP_TYPE',
        'ip_protocol': 'IP_PROTOCOL',
        'ether_type': 'ETHER_TYPE',
        'src_ip': 'SRC_IP',
        'dst_ip': 'DST_IP',
        'src_ipv6': 'SRC_IPV6',
        'dst_ipv6': 'DST_IPV6',
        'l4_src_port': 'L4_SRC_PORT',
        'l4_src_port_range': 'L4_SRC_PORT_RANGE',
        'l4_dst_port': 'L4_DST_PORT',
        'l4_dst_port_range': 'L4_DST_PORT_RANGE',
        'tcp_flags': 'TCP_FLAGS',
        'dscp': 'DSCP'
    }

    def __init__(self, aclname=None, rulename=None, priority=None, rule_description=None, packet_action=None, mirror_action=None, ip_type=None, ip_protocol=None, ether_type=None, src_ip=None, dst_ip=None, src_ipv6=None, dst_ipv6=None, l4_src_port=None, l4_src_port_range=None, l4_dst_port=None, l4_dst_port_range=None, tcp_flags=None, dscp=None):  # noqa: E501
        """SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST - a model defined in Swagger"""  # noqa: E501

        self._aclname = None
        self._rulename = None
        self._priority = None
        self._rule_description = None
        self._packet_action = None
        self._mirror_action = None
        self._ip_type = None
        self._ip_protocol = None
        self._ether_type = None
        self._src_ip = None
        self._dst_ip = None
        self._src_ipv6 = None
        self._dst_ipv6 = None
        self._l4_src_port = None
        self._l4_src_port_range = None
        self._l4_dst_port = None
        self._l4_dst_port_range = None
        self._tcp_flags = None
        self._dscp = None
        self.discriminator = None

        self.aclname = aclname
        self.rulename = rulename
        if priority is not None:
            self.priority = priority
        if rule_description is not None:
            self.rule_description = rule_description
        if packet_action is not None:
            self.packet_action = packet_action
        if mirror_action is not None:
            self.mirror_action = mirror_action
        if ip_type is not None:
            self.ip_type = ip_type
        if ip_protocol is not None:
            self.ip_protocol = ip_protocol
        if ether_type is not None:
            self.ether_type = ether_type
        if src_ip is not None:
            self.src_ip = src_ip
        if dst_ip is not None:
            self.dst_ip = dst_ip
        if src_ipv6 is not None:
            self.src_ipv6 = src_ipv6
        if dst_ipv6 is not None:
            self.dst_ipv6 = dst_ipv6
        if l4_src_port is not None:
            self.l4_src_port = l4_src_port
        if l4_src_port_range is not None:
            self.l4_src_port_range = l4_src_port_range
        if l4_dst_port is not None:
            self.l4_dst_port = l4_dst_port
        if l4_dst_port_range is not None:
            self.l4_dst_port_range = l4_dst_port_range
        if tcp_flags is not None:
            self.tcp_flags = tcp_flags
        if dscp is not None:
            self.dscp = dscp

    @property
    def aclname(self):
        """Gets the aclname of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The aclname of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._aclname

    @aclname.setter
    def aclname(self, aclname):
        """Sets the aclname of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param aclname: The aclname of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """
        if aclname is None:
            raise ValueError("Invalid value for `aclname`, must not be `None`")  # noqa: E501

        self._aclname = aclname

    @property
    def rulename(self):
        """Gets the rulename of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The rulename of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._rulename

    @rulename.setter
    def rulename(self, rulename):
        """Sets the rulename of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param rulename: The rulename of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """
        if rulename is None:
            raise ValueError("Invalid value for `rulename`, must not be `None`")  # noqa: E501

        self._rulename = rulename

    @property
    def priority(self):
        """Gets the priority of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The priority of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param priority: The priority of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def rule_description(self):
        """Gets the rule_description of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The rule_description of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._rule_description

    @rule_description.setter
    def rule_description(self, rule_description):
        """Sets the rule_description of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param rule_description: The rule_description of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._rule_description = rule_description

    @property
    def packet_action(self):
        """Gets the packet_action of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The packet_action of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._packet_action

    @packet_action.setter
    def packet_action(self, packet_action):
        """Sets the packet_action of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param packet_action: The packet_action of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """
        allowed_values = ["FORWARD", "DROP", "REDIRECT"]  # noqa: E501
        if packet_action not in allowed_values:
            raise ValueError(
                "Invalid value for `packet_action` ({0}), must be one of {1}"  # noqa: E501
                .format(packet_action, allowed_values)
            )

        self._packet_action = packet_action

    @property
    def mirror_action(self):
        """Gets the mirror_action of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The mirror_action of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._mirror_action

    @mirror_action.setter
    def mirror_action(self, mirror_action):
        """Sets the mirror_action of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param mirror_action: The mirror_action of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._mirror_action = mirror_action

    @property
    def ip_type(self):
        """Gets the ip_type of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The ip_type of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._ip_type

    @ip_type.setter
    def ip_type(self, ip_type):
        """Sets the ip_type of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param ip_type: The ip_type of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """
        allowed_values = ["ANY", "IP", "IPV4", "IPV4ANY", "NON_IPV4", "IPV6ANY", "NON_IPV6"]  # noqa: E501
        if ip_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_type, allowed_values)
            )

        self._ip_type = ip_type

    @property
    def ip_protocol(self):
        """Gets the ip_protocol of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The ip_protocol of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: int
        """
        return self._ip_protocol

    @ip_protocol.setter
    def ip_protocol(self, ip_protocol):
        """Sets the ip_protocol of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param ip_protocol: The ip_protocol of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: int
        """

        self._ip_protocol = ip_protocol

    @property
    def ether_type(self):
        """Gets the ether_type of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The ether_type of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._ether_type

    @ether_type.setter
    def ether_type(self, ether_type):
        """Sets the ether_type of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param ether_type: The ether_type of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._ether_type = ether_type

    @property
    def src_ip(self):
        """Gets the src_ip of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The src_ip of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param src_ip: The src_ip of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._src_ip = src_ip

    @property
    def dst_ip(self):
        """Gets the dst_ip of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The dst_ip of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param dst_ip: The dst_ip of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._dst_ip = dst_ip

    @property
    def src_ipv6(self):
        """Gets the src_ipv6 of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The src_ipv6 of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._src_ipv6

    @src_ipv6.setter
    def src_ipv6(self, src_ipv6):
        """Sets the src_ipv6 of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param src_ipv6: The src_ipv6 of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._src_ipv6 = src_ipv6

    @property
    def dst_ipv6(self):
        """Gets the dst_ipv6 of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The dst_ipv6 of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._dst_ipv6

    @dst_ipv6.setter
    def dst_ipv6(self, dst_ipv6):
        """Sets the dst_ipv6 of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param dst_ipv6: The dst_ipv6 of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._dst_ipv6 = dst_ipv6

    @property
    def l4_src_port(self):
        """Gets the l4_src_port of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The l4_src_port of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: int
        """
        return self._l4_src_port

    @l4_src_port.setter
    def l4_src_port(self, l4_src_port):
        """Sets the l4_src_port of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param l4_src_port: The l4_src_port of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: int
        """

        self._l4_src_port = l4_src_port

    @property
    def l4_src_port_range(self):
        """Gets the l4_src_port_range of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The l4_src_port_range of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._l4_src_port_range

    @l4_src_port_range.setter
    def l4_src_port_range(self, l4_src_port_range):
        """Sets the l4_src_port_range of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param l4_src_port_range: The l4_src_port_range of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._l4_src_port_range = l4_src_port_range

    @property
    def l4_dst_port(self):
        """Gets the l4_dst_port of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The l4_dst_port of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: int
        """
        return self._l4_dst_port

    @l4_dst_port.setter
    def l4_dst_port(self, l4_dst_port):
        """Sets the l4_dst_port of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param l4_dst_port: The l4_dst_port of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: int
        """

        self._l4_dst_port = l4_dst_port

    @property
    def l4_dst_port_range(self):
        """Gets the l4_dst_port_range of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The l4_dst_port_range of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._l4_dst_port_range

    @l4_dst_port_range.setter
    def l4_dst_port_range(self, l4_dst_port_range):
        """Sets the l4_dst_port_range of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param l4_dst_port_range: The l4_dst_port_range of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._l4_dst_port_range = l4_dst_port_range

    @property
    def tcp_flags(self):
        """Gets the tcp_flags of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The tcp_flags of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: str
        """
        return self._tcp_flags

    @tcp_flags.setter
    def tcp_flags(self, tcp_flags):
        """Sets the tcp_flags of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param tcp_flags: The tcp_flags of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: str
        """

        self._tcp_flags = tcp_flags

    @property
    def dscp(self):
        """Gets the dscp of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501


        :return: The dscp of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :rtype: int
        """
        return self._dscp

    @dscp.setter
    def dscp(self, dscp):
        """Sets the dscp of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.


        :param dscp: The dscp of this SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST.  # noqa: E501
        :type: int
        """

        self._dscp = dscp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SonicAclSonicAclSonicaclsonicaclACLRULEACLRULELIST):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
