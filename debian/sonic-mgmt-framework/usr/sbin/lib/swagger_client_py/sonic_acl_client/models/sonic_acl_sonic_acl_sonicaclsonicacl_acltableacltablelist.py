# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aclname': 'str',
        'policy_desc': 'str',
        'stage': 'str',
        'type': 'str',
        'ports': 'list[str]'
    }

    attribute_map = {
        'aclname': 'aclname',
        'policy_desc': 'policy_desc',
        'stage': 'stage',
        'type': 'type',
        'ports': 'ports'
    }

    def __init__(self, aclname=None, policy_desc=None, stage=None, type=None, ports=None):  # noqa: E501
        """SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST - a model defined in Swagger"""  # noqa: E501

        self._aclname = None
        self._policy_desc = None
        self._stage = None
        self._type = None
        self._ports = None
        self.discriminator = None

        self.aclname = aclname
        if policy_desc is not None:
            self.policy_desc = policy_desc
        if stage is not None:
            self.stage = stage
        if type is not None:
            self.type = type
        if ports is not None:
            self.ports = ports

    @property
    def aclname(self):
        """Gets the aclname of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501


        :return: The aclname of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :rtype: str
        """
        return self._aclname

    @aclname.setter
    def aclname(self, aclname):
        """Sets the aclname of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.


        :param aclname: The aclname of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :type: str
        """
        if aclname is None:
            raise ValueError("Invalid value for `aclname`, must not be `None`")  # noqa: E501

        self._aclname = aclname

    @property
    def policy_desc(self):
        """Gets the policy_desc of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501


        :return: The policy_desc of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :rtype: str
        """
        return self._policy_desc

    @policy_desc.setter
    def policy_desc(self, policy_desc):
        """Sets the policy_desc of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.


        :param policy_desc: The policy_desc of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :type: str
        """

        self._policy_desc = policy_desc

    @property
    def stage(self):
        """Gets the stage of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501


        :return: The stage of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.


        :param stage: The stage of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :type: str
        """
        allowed_values = ["INGRESS", "EGRESS"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"  # noqa: E501
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def type(self):
        """Gets the type of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501


        :return: The type of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.


        :param type: The type of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :type: str
        """
        allowed_values = ["MIRROR", "L2", "L3", "L3V6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ports(self):
        """Gets the ports of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501


        :return: The ports of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :rtype: list[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.


        :param ports: The ports of this SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST.  # noqa: E501
        :type: list[str]
        """

        self._ports = ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SonicAclSonicAclSonicaclsonicaclACLTABLEACLTABLELIST):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
