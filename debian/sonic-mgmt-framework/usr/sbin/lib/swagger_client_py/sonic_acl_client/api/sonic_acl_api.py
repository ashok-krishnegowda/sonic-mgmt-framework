# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sonic_acl_client.api_client import ApiClient


class SonicAclApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(self, aclname, ports, **kwargs):  # noqa: E501
        """del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(aclname, ports, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str ports:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, ports, **kwargs)  # noqa: E501
        else:
            (data) = self.del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, ports, **kwargs)  # noqa: E501
            return data

    def del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(self, aclname, ports, **kwargs):  # noqa: E501
        """del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, ports, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str ports:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'ports']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501
        # verify the required parameter 'ports' is set
        if ('ports' not in params or
                params['ports'] is None):
            raise ValueError("Missing the required parameter `ports` when calling `del_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'ports' in params:
            path_params['ports'] = params['ports']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/ports={ports}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(self, **kwargs):  # noqa: E501
        """delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list(self, **kwargs):  # noqa: E501
        """delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_sonic_acl_sonic_acl_acl_table_acl_table_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl(self, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_with_http_info(self, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule(self, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_with_http_info(self, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DSCP', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DST_IP', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DST_IPV6', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/ETHER_TYPE', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/IP_PROTOCOL', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/IP_TYPE', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_DST_PORT', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_DST_PORT_RANGE', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_SRC_PORT', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_SRC_PORT_RANGE', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/MIRROR_ACTION', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/PACKET_ACTION', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/PRIORITY', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/RULE_DESCRIPTION', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/SRC_IP', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/SRC_IPV6', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `delete_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/TCP_FLAGS', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_table(self, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_table_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_table_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_table_with_http_info(self, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_table" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_table_acl_table_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_table_acl_table_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/policy_desc', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/ports', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_table_acl_table_list_stage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/stage', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type  # noqa: E501

        OperationId: delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `delete_sonic_acl_sonic_acl_acl_table_acl_table_list_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/type', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(self, **kwargs):  # noqa: E501
        """get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAclAclRuleAclRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAclAclRuleAclRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_sonic_acl_sonic_acl_acl_table_acl_table_list(self, **kwargs):  # noqa: E501
        """get_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: get_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_acl_sonic_acl_acl_table_acl_table_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAclAclTableAclTableList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: get_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAclAclTableAclTableList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_sonic_acl_sonic_acl_acl_table_acl_table_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclTableAclTableList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(self, aclname, ports, **kwargs):  # noqa: E501
        """get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(aclname, ports, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str ports:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListPorts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, ports, **kwargs)  # noqa: E501
        else:
            (data) = self.get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, ports, **kwargs)  # noqa: E501
            return data

    def get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(self, aclname, ports, **kwargs):  # noqa: E501
        """get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, ports, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str ports:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListPorts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'ports']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501
        # verify the required parameter 'ports' is set
        if ('ports' not in params or
                params['ports'] is None):
            raise ValueError("Missing the required parameter `ports` when calling `get_llist_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'ports' in params:
            path_params['ports'] = params['ports']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/ports={ports}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclTableAclTableListPorts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl(self, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAcl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_with_http_info(self, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAcl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAcl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule(self, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAclAclRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_with_http_info(self, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAclAclRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListDscp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DSCP', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListDscp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListDstIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListDstIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DST_IP', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListDstIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListDstIpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListDstIpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DST_IPV6', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListDstIpv6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListEtherType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListEtherType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/ETHER_TYPE', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListEtherType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListIpProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListIpProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/IP_PROTOCOL', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListIpProtocol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListIpType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListIpType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/IP_TYPE', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListIpType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListL4DstPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListL4DstPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_DST_PORT', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListL4DstPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListL4DstPortRange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListL4DstPortRange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_DST_PORT_RANGE', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListL4DstPortRange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListL4SrcPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListL4SrcPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_SRC_PORT', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListL4SrcPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListL4SrcPortRange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListL4SrcPortRange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_SRC_PORT_RANGE', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListL4SrcPortRange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListMirrorAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListMirrorAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/MIRROR_ACTION', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListMirrorAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListPacketAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListPacketAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/PACKET_ACTION', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListPacketAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListPriority
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/PRIORITY', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListPriority',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListRuleDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListRuleDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/RULE_DESCRIPTION', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListRuleDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListSrcIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListSrcIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/SRC_IP', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListSrcIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListSrcIpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListSrcIpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/SRC_IPV6', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListSrcIpv6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListTcpFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(self, aclname, rulename, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :return: GetSonicAclSonicAclAclRuleAclRuleListTcpFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `get_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/TCP_FLAGS', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclRuleAclRuleListTcpFlags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_table(self, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAclAclTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_table_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_table_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_table_with_http_info(self, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSonicAclSonicAclAclTable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_table" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclTable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_table_acl_table_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_table_acl_table_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclTableAclTableList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListPolicyDesc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListPolicyDesc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/policy_desc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclTableAclTableListPolicyDesc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListPorts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListPorts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclTableAclTableListPorts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListStage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListStage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_table_acl_table_list_stage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/stage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclTableAclTableListStage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list_type(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list_type  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list_type(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, **kwargs)  # noqa: E501
            return data

    def get_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(self, aclname, **kwargs):  # noqa: E501
        """get_sonic_acl_sonic_acl_acl_table_acl_table_list_type  # noqa: E501

        OperationId: get_sonic_acl_sonic_acl_acl_table_acl_table_list_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :return: GetSonicAclSonicAclAclTableAclTableListType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sonic_acl_sonic_acl_acl_table_acl_table_list_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `get_sonic_acl_sonic_acl_acl_table_acl_table_list_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSonicAclSonicAclAclTableAclTableListType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_sonic_acl_sonic_acl_acl_table_acl_table_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl(self, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicAclSonicAcl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicAclSonicAcl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule(self, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicAclSonicAclAclRule body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicAclSonicAclAclRule body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DSCP', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListDstIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListDstIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DST_IP', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListDstIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListDstIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DST_IPV6', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListEtherType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListEtherType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/ETHER_TYPE', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListIpProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListIpProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/IP_PROTOCOL', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListIpType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListIpType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/IP_TYPE', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListL4DstPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListL4DstPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_DST_PORT', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListL4DstPortRange body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListL4DstPortRange body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_DST_PORT_RANGE', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListL4SrcPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListL4SrcPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_SRC_PORT', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListL4SrcPortRange body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListL4SrcPortRange body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_SRC_PORT_RANGE', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListMirrorAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListMirrorAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/MIRROR_ACTION', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListPacketAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListPacketAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/PACKET_ACTION', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/PRIORITY', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListRuleDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListRuleDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/RULE_DESCRIPTION', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/SRC_IP', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListSrcIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListSrcIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/SRC_IPV6', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListTcpFlags body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PatchSonicAclSonicAclAclRuleAclRuleListTcpFlags body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/TCP_FLAGS', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_table(self, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicAclSonicAclAclTable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_table_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_table_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_table_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchSonicAclSonicAclAclTable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_table_acl_table_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableListPolicyDesc body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableListPolicyDesc body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/policy_desc', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableListPorts body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableListPorts body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/ports', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableListStage body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableListStage body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list_stage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/stage', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableListType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type  # noqa: E501

        OperationId: patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PatchSonicAclSonicAclAclTableAclTableListType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_sonic_acl_sonic_acl_acl_table_acl_table_list_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/type', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_sonic_acl_sonic_acl_acl_table_acl_table_list(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: post_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_acl_sonic_acl_acl_table_acl_table_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: post_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_sonic_acl_sonic_acl_acl_table_acl_table_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_sonic_acl_sonic_acl_acl_table_acl_table_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PostSonicAclSonicAclAclRuleAclRuleListPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PostSonicAclSonicAclAclRuleAclRuleListPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sonic_acl_sonic_acl_acl_table(self, body, **kwargs):  # noqa: E501
        """post_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: post_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_acl_sonic_acl_acl_table(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSonicAclSonicAclAclTable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sonic_acl_sonic_acl_acl_table_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sonic_acl_sonic_acl_acl_table_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_sonic_acl_sonic_acl_acl_table_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: post_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_acl_sonic_acl_acl_table_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSonicAclSonicAclAclTable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sonic_acl_sonic_acl_acl_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sonic_acl_sonic_acl_acl_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(self, aclname, body, **kwargs):  # noqa: E501
        """post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PostSonicAclSonicAclAclTableAclTableListPolicyDesc body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PostSonicAclSonicAclAclTableAclTableListPolicyDesc body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_sonic_acl_sonic_acl_acl_table_acl_table_list(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: put_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_acl_sonic_acl_acl_table_acl_table_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: put_list_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_sonic_acl_sonic_acl_acl_table_acl_table_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_sonic_acl_sonic_acl_acl_table_acl_table_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl(self, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicAclSonicAcl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicAclSonicAcl body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule(self, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicAclSonicAclAclRule body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicAclSonicAclAclRule body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListDscp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dscp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DSCP', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListDstIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListDstIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DST_IP', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListDstIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListDstIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_dst_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/DST_IPV6', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListEtherType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListEtherType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ether_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/ETHER_TYPE', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListIpProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListIpProtocol body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/IP_PROTOCOL', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListIpType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListIpType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_ip_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/IP_TYPE', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListL4DstPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListL4DstPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_DST_PORT', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListL4DstPortRange body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListL4DstPortRange body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_dst_port_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_DST_PORT_RANGE', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListL4SrcPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListL4SrcPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_SRC_PORT', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListL4SrcPortRange body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListL4SrcPortRange body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_l4_src_port_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/L4_SRC_PORT_RANGE', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListMirrorAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListMirrorAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_mirror_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/MIRROR_ACTION', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListPacketAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListPacketAction body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_packet_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/PACKET_ACTION', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListPriority body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_priority`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/PRIORITY', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListRuleDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListRuleDescription body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_rule_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/RULE_DESCRIPTION', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListSrcIp body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/SRC_IP', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListSrcIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListSrcIpv6 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_src_ipv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/SRC_IPV6', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListTcpFlags body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(self, aclname, rulename, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags_with_http_info(aclname, rulename, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param str rulename:  (required)
        :param PutSonicAclSonicAclAclRuleAclRuleListTcpFlags body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'rulename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501
        # verify the required parameter 'rulename' is set
        if ('rulename' not in params or
                params['rulename'] is None):
            raise ValueError("Missing the required parameter `rulename` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_rule_acl_rule_list_tcp_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501
        if 'rulename' in params:
            path_params['rulename'] = params['rulename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_RULE/ACL_RULE_LIST={aclname},{rulename}/TCP_FLAGS', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_table(self, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicAclSonicAclAclTable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_table_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_table_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_table_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSonicAclSonicAclAclTable body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableList body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_table_acl_table_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableListPolicyDesc body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableListPolicyDesc body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list_policy_desc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/policy_desc', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableListPorts body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableListPorts body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list_ports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/ports', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableListStage body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableListStage body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list_stage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/stage', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list_type(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list_type  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list_type(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableListType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, body, **kwargs)  # noqa: E501
            return data

    def put_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(self, aclname, body, **kwargs):  # noqa: E501
        """put_sonic_acl_sonic_acl_acl_table_acl_table_list_type  # noqa: E501

        OperationId: put_sonic_acl_sonic_acl_acl_table_acl_table_list_type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sonic_acl_sonic_acl_acl_table_acl_table_list_type_with_http_info(aclname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aclname:  (required)
        :param PutSonicAclSonicAclAclTableAclTableListType body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aclname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sonic_acl_sonic_acl_acl_table_acl_table_list_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aclname' is set
        if ('aclname' not in params or
                params['aclname'] is None):
            raise ValueError("Missing the required parameter `aclname` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list_type`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_sonic_acl_sonic_acl_acl_table_acl_table_list_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aclname' in params:
            path_params['aclname'] = params['aclname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sonic-acl:sonic-acl/ACL_TABLE/ACL_TABLE_LIST={aclname}/type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
