# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openconfig_platform_client.api_client import ApiClient


class OpenconfigPlatformApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_list_openconfig_platform_components_component(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_platform_components_component  # noqa: E501

        OperationId: delete_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_platform_components_component(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_platform_components_component_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_platform_components_component_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_platform_components_component_with_http_info(self, **kwargs):  # noqa: E501
        """delete_list_openconfig_platform_components_component  # noqa: E501

        OperationId: delete_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_platform_components_component_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_platform_components_component" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_platform_components_component_properties_property(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: delete_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_platform_components_component_properties_property(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_platform_components_component_properties_property_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_platform_components_component_properties_property_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_platform_components_component_properties_property_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: delete_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_platform_components_component_properties_property_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_platform_components_component_properties_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_list_openconfig_platform_components_component_properties_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_openconfig_platform_components_component_subcomponents_subcomponent(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: delete_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_platform_components_component_subcomponents_subcomponent(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: delete_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_openconfig_platform_components_component_subcomponents_subcomponent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_list_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components(self, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components  # noqa: E501

        OperationId: delete_openconfig_platform_components Enclosing container for the components in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_with_http_info(self, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components  # noqa: E501

        OperationId: delete_openconfig_platform_components Enclosing container for the components in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component  # noqa: E501

        OperationId: delete_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component  # noqa: E501

        OperationId: delete_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_backplane(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_backplane  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_backplane Data for backplane components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_backplane(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_backplane_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_backplane_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_backplane_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_backplane  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_backplane Data for backplane components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_backplane_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_backplane" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_backplane`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/backplane', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_chassis(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_chassis  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_chassis Data for chassis components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_chassis(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_chassis_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_chassis_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_chassis_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_chassis  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_chassis Data for chassis components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_chassis_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_chassis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_chassis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/chassis', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_cpu(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_cpu  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_cpu Data for cpu components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_cpu(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_cpu_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_cpu_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_cpu_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_cpu  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_cpu Data for cpu components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_cpu_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_cpu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_cpu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/cpu', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_fabric(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_fabric  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_fabric Data for fabric components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_fabric(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_fabric_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_fabric_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_fabric_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_fabric  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_fabric Data for fabric components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_fabric_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_fabric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_fabric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/fabric', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_fan(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_fan  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_fan Data for fan components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_fan(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_fan_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_fan_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_fan_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_fan  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_fan Data for fan components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_fan_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_fan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_fan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/fan', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_integrated_circuit(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_integrated_circuit  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_integrated_circuit Data for chip components, such as ASIC, NPUs, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_integrated_circuit(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_integrated_circuit_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_integrated_circuit_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_integrated_circuit_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_integrated_circuit  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_integrated_circuit Data for chip components, such as ASIC, NPUs, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_integrated_circuit_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_integrated_circuit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_integrated_circuit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/integrated-circuit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_port(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_port  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_port Data for physical port components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_port(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_port_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_port_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_port_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_port  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_port Data for physical port components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_port_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_power_supply(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_power_supply  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_power_supply Data for power supply components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_power_supply(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_power_supply_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_power_supply_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_power_supply_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_power_supply  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_power_supply Data for power supply components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_power_supply_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_power_supply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_power_supply`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/power-supply', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_properties(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_properties  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_properties Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_properties(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_properties_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_properties_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_properties_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_properties  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_properties Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_properties_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_properties_property(self, name, name2, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_properties_property(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_properties_property_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_properties_property_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_properties_property_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_properties_property_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_properties_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_properties_property`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `delete_openconfig_platform_components_component_properties_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_properties_property_config_value(self, name, name2, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_properties_property_config_value(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_properties_property_config_value_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_properties_property_config_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `delete_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/config/value', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_storage(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_storage  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_storage Data for storage components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_storage(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_storage_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_storage_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_storage_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_storage  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_storage Data for storage components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_storage_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/storage', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_subcomponents(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_subcomponents  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_subcomponents Enclosing container for subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_subcomponents(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_subcomponents_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_subcomponents_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_subcomponents_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_subcomponents  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_subcomponents Enclosing container for subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_subcomponents_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_subcomponents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_subcomponents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_openconfig_platform_components_component_subcomponents_subcomponent(self, name, name2, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_subcomponents_subcomponent(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def delete_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """delete_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: delete_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_openconfig_platform_components_component_subcomponents_subcomponent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `delete_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_platform_components_component(self, **kwargs):  # noqa: E501
        """get_list_openconfig_platform_components_component  # noqa: E501

        OperationId: get_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_platform_components_component(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigPlatformComponentsComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_platform_components_component_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_platform_components_component_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_list_openconfig_platform_components_component_with_http_info(self, **kwargs):  # noqa: E501
        """get_list_openconfig_platform_components_component  # noqa: E501

        OperationId: get_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_platform_components_component_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigPlatformComponentsComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_platform_components_component" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_platform_components_component_properties_property(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: get_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_platform_components_component_properties_property(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_platform_components_component_properties_property_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_platform_components_component_properties_property_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_platform_components_component_properties_property_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: get_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_platform_components_component_properties_property_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_platform_components_component_properties_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_list_openconfig_platform_components_component_properties_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPropertiesProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_openconfig_platform_components_component_subcomponents_subcomponent(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: get_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_platform_components_component_subcomponents_subcomponent(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: get_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_openconfig_platform_components_component_subcomponents_subcomponent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_list_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_alarms_components_component_state_equipment_failure(self, name, **kwargs):  # noqa: E501
        """get_openconfig_alarms_components_component_state_equipment_failure  # noqa: E501

        OperationId: get_openconfig_alarms_components_component_state_equipment_failure If true, the hardware indicates that the component's physical equipment has failed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_alarms_components_component_state_equipment_failure(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigAlarmsComponentsComponentStateEquipmentFailure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_alarms_components_component_state_equipment_failure_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_alarms_components_component_state_equipment_failure_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_alarms_components_component_state_equipment_failure_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_alarms_components_component_state_equipment_failure  # noqa: E501

        OperationId: get_openconfig_alarms_components_component_state_equipment_failure If true, the hardware indicates that the component's physical equipment has failed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_alarms_components_component_state_equipment_failure_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigAlarmsComponentsComponentStateEquipmentFailure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_alarms_components_component_state_equipment_failure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_alarms_components_component_state_equipment_failure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/openconfig-alarms:equipment-failure', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAlarmsComponentsComponentStateEquipmentFailure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_alarms_components_component_state_equipment_mismatch(self, name, **kwargs):  # noqa: E501
        """get_openconfig_alarms_components_component_state_equipment_mismatch  # noqa: E501

        OperationId: get_openconfig_alarms_components_component_state_equipment_mismatch If true, the hardware indicates that the component inserted into the affected component's physical location is of a different type than what is configured  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_alarms_components_component_state_equipment_mismatch(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigAlarmsComponentsComponentStateEquipmentMismatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_alarms_components_component_state_equipment_mismatch_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_alarms_components_component_state_equipment_mismatch_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_alarms_components_component_state_equipment_mismatch_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_alarms_components_component_state_equipment_mismatch  # noqa: E501

        OperationId: get_openconfig_alarms_components_component_state_equipment_mismatch If true, the hardware indicates that the component inserted into the affected component's physical location is of a different type than what is configured  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_alarms_components_component_state_equipment_mismatch_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigAlarmsComponentsComponentStateEquipmentMismatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_alarms_components_component_state_equipment_mismatch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_alarms_components_component_state_equipment_mismatch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/openconfig-alarms:equipment-mismatch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigAlarmsComponentsComponentStateEquipmentMismatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components(self, **kwargs):  # noqa: E501
        """get_openconfig_platform_components  # noqa: E501

        OperationId: get_openconfig_platform_components Enclosing container for the components in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigPlatformComponents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_with_http_info(self, **kwargs):  # noqa: E501
        """get_openconfig_platform_components  # noqa: E501

        OperationId: get_openconfig_platform_components Enclosing container for the components in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetOpenconfigPlatformComponents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component  # noqa: E501

        OperationId: get_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component  # noqa: E501

        OperationId: get_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_backplane(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_backplane  # noqa: E501

        OperationId: get_openconfig_platform_components_component_backplane Data for backplane components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_backplane(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentBackplane
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_backplane_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_backplane_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_backplane_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_backplane  # noqa: E501

        OperationId: get_openconfig_platform_components_component_backplane Data for backplane components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_backplane_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentBackplane
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_backplane" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_backplane`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/backplane', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentBackplane',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_chassis(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_chassis  # noqa: E501

        OperationId: get_openconfig_platform_components_component_chassis Data for chassis components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_chassis(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentChassis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_chassis_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_chassis_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_chassis_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_chassis  # noqa: E501

        OperationId: get_openconfig_platform_components_component_chassis Data for chassis components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_chassis_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentChassis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_chassis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_chassis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/chassis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentChassis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_config(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_config  # noqa: E501

        OperationId: get_openconfig_platform_components_component_config Configuration data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_config(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_config_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_config_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_config_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_config  # noqa: E501

        OperationId: get_openconfig_platform_components_component_config Configuration data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_config_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_cpu(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_cpu  # noqa: E501

        OperationId: get_openconfig_platform_components_component_cpu Data for cpu components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_cpu(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentCpu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_cpu_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_cpu_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_cpu_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_cpu  # noqa: E501

        OperationId: get_openconfig_platform_components_component_cpu Data for cpu components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_cpu_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentCpu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_cpu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_cpu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/cpu', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentCpu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_fabric(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_fabric  # noqa: E501

        OperationId: get_openconfig_platform_components_component_fabric Data for fabric components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_fabric(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentFabric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_fabric_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_fabric_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_fabric_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_fabric  # noqa: E501

        OperationId: get_openconfig_platform_components_component_fabric Data for fabric components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_fabric_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentFabric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_fabric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_fabric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/fabric', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentFabric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_fan(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_fan  # noqa: E501

        OperationId: get_openconfig_platform_components_component_fan Data for fan components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_fan(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentFan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_fan_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_fan_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_fan_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_fan  # noqa: E501

        OperationId: get_openconfig_platform_components_component_fan Data for fan components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_fan_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentFan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_fan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_fan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/fan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentFan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_integrated_circuit(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_integrated_circuit  # noqa: E501

        OperationId: get_openconfig_platform_components_component_integrated_circuit Data for chip components, such as ASIC, NPUs, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_integrated_circuit(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentIntegratedCircuit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_integrated_circuit_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_integrated_circuit_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_integrated_circuit_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_integrated_circuit  # noqa: E501

        OperationId: get_openconfig_platform_components_component_integrated_circuit Data for chip components, such as ASIC, NPUs, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_integrated_circuit_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentIntegratedCircuit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_integrated_circuit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_integrated_circuit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/integrated-circuit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentIntegratedCircuit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_port(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_port  # noqa: E501

        OperationId: get_openconfig_platform_components_component_port Data for physical port components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_port(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentPort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_port_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_port_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_port_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_port  # noqa: E501

        OperationId: get_openconfig_platform_components_component_port Data for physical port components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_port_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentPort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_power_supply(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_power_supply  # noqa: E501

        OperationId: get_openconfig_platform_components_component_power_supply Data for power supply components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_power_supply(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentPowerSupply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_power_supply_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_power_supply_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_power_supply_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_power_supply  # noqa: E501

        OperationId: get_openconfig_platform_components_component_power_supply Data for power supply components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_power_supply_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentPowerSupply
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_power_supply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_power_supply`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/power-supply', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPowerSupply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_properties(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_properties_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_properties_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_properties_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_properties_property(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_properties_property_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_properties_property_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_properties_property_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_properties_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_properties_property`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_properties_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPropertiesProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_properties_property_config(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_config  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_config Configuration data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_config(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_properties_property_config_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_config  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_config Configuration data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_properties_property_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_properties_property_config`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_properties_property_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPropertiesPropertyConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_properties_property_config_value(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_config_value(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyConfigValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_properties_property_config_value_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyConfigValue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_properties_property_config_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/config/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPropertiesPropertyConfigValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_properties_property_state(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_state  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_state Operational state data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_state(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_properties_property_state_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_properties_property_state_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_properties_property_state_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_state  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_state Operational state data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_state_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_properties_property_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_properties_property_state`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_properties_property_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPropertiesPropertyState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_properties_property_state_configurable(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_state_configurable  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_state_configurable Indication whether the property is user-configurable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_state_configurable(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyStateConfigurable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_properties_property_state_configurable_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_properties_property_state_configurable_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_properties_property_state_configurable_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_state_configurable  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_state_configurable Indication whether the property is user-configurable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_state_configurable_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyStateConfigurable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_properties_property_state_configurable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_properties_property_state_configurable`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_properties_property_state_configurable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/state/configurable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPropertiesPropertyStateConfigurable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_properties_property_state_name(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_state_name  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_state_name System-supplied name of the property -- this is typically non-configurable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_state_name(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_properties_property_state_name_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_properties_property_state_name_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_properties_property_state_name_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_state_name  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_state_name System-supplied name of the property -- this is typically non-configurable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_state_name_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_properties_property_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_properties_property_state_name`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_properties_property_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPropertiesPropertyStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_properties_property_state_value(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_state_value  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_state_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_state_value(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyStateValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_properties_property_state_value_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_properties_property_state_value_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_properties_property_state_value_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_properties_property_state_value  # noqa: E501

        OperationId: get_openconfig_platform_components_component_properties_property_state_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_properties_property_state_value_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :return: GetOpenconfigPlatformComponentsComponentPropertiesPropertyStateValue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_properties_property_state_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_properties_property_state_value`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_properties_property_state_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/state/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentPropertiesPropertyStateValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state Operational state data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state Operational state data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_allocated_power(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_allocated_power  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_allocated_power Power allocated by the system for the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_allocated_power(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateAllocatedPower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_allocated_power_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_allocated_power_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_allocated_power_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_allocated_power  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_allocated_power Power allocated by the system for the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_allocated_power_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateAllocatedPower
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_allocated_power" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_allocated_power`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/allocated-power', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateAllocatedPower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_description(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_description  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_description System-supplied description of the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_description(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_description_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_description_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_description_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_description  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_description System-supplied description of the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_description_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_empty(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_empty  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_empty The empty leaf may be used by the device to indicate that a component position exists but is not populated.  Using this flag, it is possible for the management system to learn how many positions are available (e.g., occupied vs. empty linecard slots in a chassis).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_empty(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateEmpty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_empty_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_empty_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_empty_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_empty  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_empty The empty leaf may be used by the device to indicate that a component position exists but is not populated.  Using this flag, it is possible for the management system to learn how many positions are available (e.g., occupied vs. empty linecard slots in a chassis).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_empty_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateEmpty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_empty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_empty`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/empty', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateEmpty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_firmware_version(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_firmware_version  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_firmware_version For hardware components, this is the version of associated firmware that is running on the component, if applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_firmware_version(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateFirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_firmware_version_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_firmware_version_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_firmware_version_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_firmware_version  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_firmware_version For hardware components, this is the version of associated firmware that is running on the component, if applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_firmware_version_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateFirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_firmware_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_firmware_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/firmware-version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateFirmwareVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_hardware_version(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_hardware_version  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_hardware_version For hardware components, this is the hardware revision of the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_hardware_version(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateHardwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_hardware_version_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_hardware_version_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_hardware_version_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_hardware_version  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_hardware_version For hardware components, this is the hardware revision of the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_hardware_version_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateHardwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_hardware_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_hardware_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/hardware-version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateHardwareVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_id(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_id  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_id Unique identifier assigned by the system for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_id(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_id_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_id_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_id_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_id  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_id Unique identifier assigned by the system for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_id_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_location(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_location  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_location System-supplied description of the location of the component within the system. This could be a bay position, slot number, socket location, etc. For component types that have an explicit slot-id attribute, such as linecards, the system should populate the more specific slot-id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_location(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_location_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_location_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_location_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_location  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_location System-supplied description of the location of the component within the system. This could be a bay position, slot number, socket location, etc. For component types that have an explicit slot-id attribute, such as linecards, the system should populate the more specific slot-id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_location_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_memory(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_memory  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_memory For components that have associated memory, these values report information about available and utilized memory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_memory(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMemory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_memory_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_memory_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_memory_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_memory  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_memory For components that have associated memory, these values report information about available and utilized memory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_memory_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMemory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_memory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_memory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/memory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateMemory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_memory_available(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_memory_available  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_memory_available The available memory physically installed, or logically allocated to the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_memory_available(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMemoryAvailable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_memory_available_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_memory_available_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_memory_available_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_memory_available  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_memory_available The available memory physically installed, or logically allocated to the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_memory_available_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMemoryAvailable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_memory_available" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_memory_available`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/memory/available', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateMemoryAvailable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_memory_utilized(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_memory_utilized  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_memory_utilized The memory currently in use by processes running on the component, not considering reserved memory that is not available for use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_memory_utilized(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMemoryUtilized
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_memory_utilized_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_memory_utilized_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_memory_utilized_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_memory_utilized  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_memory_utilized The memory currently in use by processes running on the component, not considering reserved memory that is not available for use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_memory_utilized_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMemoryUtilized
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_memory_utilized" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_memory_utilized`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/memory/utilized', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateMemoryUtilized',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_mfg_date(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_mfg_date  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_mfg_date System-supplied representation of the component's manufacturing date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_mfg_date(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMfgDate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_mfg_date_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_mfg_date_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_mfg_date_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_mfg_date  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_mfg_date System-supplied representation of the component's manufacturing date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_mfg_date_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMfgDate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_mfg_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_mfg_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/mfg-date', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateMfgDate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_mfg_name(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_mfg_name  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_mfg_name System-supplied identifier for the manufacturer of the component.  This data is particularly useful when a component manufacturer is different than the overall device vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_mfg_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMfgName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_mfg_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_mfg_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_mfg_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_mfg_name  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_mfg_name System-supplied identifier for the manufacturer of the component.  This data is particularly useful when a component manufacturer is different than the overall device vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_mfg_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateMfgName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_mfg_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_mfg_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/mfg-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateMfgName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_name(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_name  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_name Device name for the component -- this may not be a configurable parameter on many implementations.  Where component preconfiguration is supported, for example, the component name may be configurable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_name  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_name Device name for the component -- this may not be a configurable parameter on many implementations.  Where component preconfiguration is supported, for example, the component name may be configurable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_oper_status(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_oper_status  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_oper_status If applicable, this reports the current operational status of the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_oper_status(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateOperStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_oper_status_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_oper_status_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_oper_status_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_oper_status  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_oper_status If applicable, this reports the current operational status of the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_oper_status_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateOperStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_oper_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_oper_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/oper-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateOperStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_parent(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_parent  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_parent Reference to the name of the parent component.  Note that this reference must be kept synchronized with the corresponding subcomponent reference from the parent component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_parent(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateParent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_parent_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_parent_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_parent_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_parent  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_parent Reference to the name of the parent component.  Note that this reference must be kept synchronized with the corresponding subcomponent reference from the parent component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_parent_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateParent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_parent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_parent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/parent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateParent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_part_no(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_part_no  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_part_no System-assigned part number for the component.  This should be present in particular if the component is also an FRU (field replaceable unit)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_part_no(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStatePartNo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_part_no_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_part_no_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_part_no_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_part_no  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_part_no System-assigned part number for the component.  This should be present in particular if the component is also an FRU (field replaceable unit)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_part_no_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStatePartNo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_part_no" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_part_no`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/part-no', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStatePartNo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_removable(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_removable  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_removable If true, this component is removable or is a field replaceable unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_removable(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateRemovable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_removable_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_removable_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_removable_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_removable  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_removable If true, this component is removable or is a field replaceable unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_removable_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateRemovable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_removable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_removable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/removable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateRemovable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_serial_no(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_serial_no  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_serial_no System-assigned serial number of the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_serial_no(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateSerialNo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_serial_no_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_serial_no_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_serial_no_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_serial_no  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_serial_no System-assigned serial number of the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_serial_no_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateSerialNo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_serial_no" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_serial_no`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/serial-no', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateSerialNo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_software_version(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_software_version  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_software_version For software components such as operating system or other software module, this is the version of the currently running software.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_software_version(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateSoftwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_software_version_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_software_version_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_software_version_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_software_version  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_software_version For software components such as operating system or other software module, this is the version of the currently running software.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_software_version_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateSoftwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_software_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_software_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/software-version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateSoftwareVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature Temperature in degrees Celsius of the component. Values include the instantaneous, average, minimum, and maximum statistics. If avg/min/max statistics are not supported, the target is expected to just supply the instant value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature Temperature in degrees Celsius of the component. Values include the instantaneous, average, minimum, and maximum statistics. If avg/min/max statistics are not supported, the target is expected to just supply the instant value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_alarm_severity(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_alarm_severity  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_alarm_severity The severity of the current alarm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_alarm_severity(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureAlarmSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_alarm_severity_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_alarm_severity_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_alarm_severity_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_alarm_severity  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_alarm_severity The severity of the current alarm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_alarm_severity_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureAlarmSeverity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_alarm_severity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_alarm_severity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/alarm-severity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureAlarmSeverity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_alarm_status(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_alarm_status  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_alarm_status A value of true indicates the alarm has been raised or asserted.  The value should be false when the alarm is cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_alarm_status(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureAlarmStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_alarm_status_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_alarm_status_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_alarm_status_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_alarm_status  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_alarm_status A value of true indicates the alarm has been raised or asserted.  The value should be false when the alarm is cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_alarm_status_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureAlarmStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_alarm_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_alarm_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/alarm-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureAlarmStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_alarm_threshold(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_alarm_threshold  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_alarm_threshold The threshold value that was crossed for this alarm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_alarm_threshold(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureAlarmThreshold
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_alarm_threshold_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_alarm_threshold_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_alarm_threshold_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_alarm_threshold  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_alarm_threshold The threshold value that was crossed for this alarm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_alarm_threshold_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureAlarmThreshold
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_alarm_threshold" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_alarm_threshold`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/alarm-threshold', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureAlarmThreshold',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_avg(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_avg  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_avg The arithmetic mean value of the statistic over the sampling period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_avg(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_avg_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_avg_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_avg_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_avg  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_avg The arithmetic mean value of the statistic over the sampling period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_avg_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureAvg
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_avg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_avg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/avg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureAvg',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_instant(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_instant  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_instant The instantaneous value of the statistic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_instant(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_instant_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_instant_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_instant_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_instant  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_instant The instantaneous value of the statistic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_instant_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureInstant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_instant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_instant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/instant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureInstant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_interval(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_interval  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_interval(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_interval_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_interval_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_interval_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_interval  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_interval If supported by the system, this reports the time interval over which the min/max/average statistics are computed by the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_interval_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureInterval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_interval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_interval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/interval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureInterval',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_max(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_max  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_max The maximum value of the statistic over the sampling period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_max(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_max_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_max_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_max_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_max  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_max The maximum value of the statistic over the sampling period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_max_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_max" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_max`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_max_time(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_max_time  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_max_time(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_max_time_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_max_time_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_max_time_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_max_time  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_max_time The absolute time at which the maximum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_max_time_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureMaxTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_max_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_max_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/max-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureMaxTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_min(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_min  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_min The minimum value of the statistic over the sampling period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_min(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureMin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_min_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_min_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_min_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_min  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_min The minimum value of the statistic over the sampling period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_min_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureMin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_min" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_min`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/min', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureMin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_temperature_min_time(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_min_time  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_min_time(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_temperature_min_time_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_temperature_min_time_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_temperature_min_time_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_temperature_min_time  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_temperature_min_time The absolute time at which the minimum value occurred. The value is the timestamp in nanoseconds relative to  the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_temperature_min_time_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateTemperatureMinTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_temperature_min_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_temperature_min_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/temperature/min-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateTemperatureMinTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_type(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_type  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_type Type of component as identified by the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_type(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_type_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_type_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_type_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_type  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_type Type of component as identified by the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_type_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_state_used_power(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_used_power  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_used_power Actual power used by the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_used_power(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateUsedPower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_state_used_power_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_state_used_power_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_state_used_power_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_state_used_power  # noqa: E501

        OperationId: get_openconfig_platform_components_component_state_used_power Actual power used by the component.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_state_used_power_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStateUsedPower
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_state_used_power" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_state_used_power`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/state/used-power', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStateUsedPower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_storage(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_storage  # noqa: E501

        OperationId: get_openconfig_platform_components_component_storage Data for storage components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_storage(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStorage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_storage_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_storage_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_storage_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_storage  # noqa: E501

        OperationId: get_openconfig_platform_components_component_storage Data for storage components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_storage_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentStorage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/storage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentStorage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_subcomponents(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents Enclosing container for subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_subcomponents_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_subcomponents_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_subcomponents_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents Enclosing container for subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_subcomponents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_subcomponents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentSubcomponents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_subcomponents_subcomponent(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents_subcomponent(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_subcomponents_subcomponent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_subcomponents_subcomponent_config(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents_subcomponent_config  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents_subcomponent_config Configuration data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents_subcomponent_config(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents_subcomponent_config  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents_subcomponent_config Configuration data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_subcomponents_subcomponent_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_subcomponents_subcomponent_state(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents_subcomponent_state  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents_subcomponent_state Operational state data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents_subcomponent_state(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_subcomponents_subcomponent_state_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_subcomponents_subcomponent_state_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_subcomponents_subcomponent_state_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents_subcomponent_state  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents_subcomponent_state Operational state data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents_subcomponent_state_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_subcomponents_subcomponent_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_subcomponents_subcomponent_state`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_subcomponents_subcomponent_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_openconfig_platform_components_component_subcomponents_subcomponent_state_name(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents_subcomponent_state_name  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents_subcomponent_state_name Reference to the name of the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents_subcomponent_state_name(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_openconfig_platform_components_component_subcomponents_subcomponent_state_name_with_http_info(name, name2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_openconfig_platform_components_component_subcomponents_subcomponent_state_name_with_http_info(name, name2, **kwargs)  # noqa: E501
            return data

    def get_openconfig_platform_components_component_subcomponents_subcomponent_state_name_with_http_info(self, name, name2, **kwargs):  # noqa: E501
        """get_openconfig_platform_components_component_subcomponents_subcomponent_state_name  # noqa: E501

        OperationId: get_openconfig_platform_components_component_subcomponents_subcomponent_state_name Reference to the name of the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_openconfig_platform_components_component_subcomponents_subcomponent_state_name_with_http_info(name, name2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :return: GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentStateName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_openconfig_platform_components_component_subcomponents_subcomponent_state_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_openconfig_platform_components_component_subcomponents_subcomponent_state_name`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `get_openconfig_platform_components_component_subcomponents_subcomponent_state_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}/state/name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentStateName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_platform_components_component(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_platform_components_component  # noqa: E501

        OperationId: patch_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_platform_components_component(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_platform_components_component_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_platform_components_component_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_platform_components_component_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_platform_components_component  # noqa: E501

        OperationId: patch_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_platform_components_component_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchListOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_platform_components_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_platform_components_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_platform_components_component_properties_property(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: patch_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_platform_components_component_properties_property(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchListOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_platform_components_component_properties_property_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_platform_components_component_properties_property_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_platform_components_component_properties_property_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: patch_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_platform_components_component_properties_property_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchListOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_platform_components_component_properties_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_list_openconfig_platform_components_component_properties_property`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_platform_components_component_properties_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_list_openconfig_platform_components_component_subcomponents_subcomponent(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: patch_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_platform_components_component_subcomponents_subcomponent(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchListOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: patch_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchListOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_list_openconfig_platform_components_component_subcomponents_subcomponent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_list_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_list_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components  # noqa: E501

        OperationId: patch_openconfig_platform_components Enclosing container for the components in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigPlatformComponents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_with_http_info(self, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components  # noqa: E501

        OperationId: patch_openconfig_platform_components Enclosing container for the components in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchOpenconfigPlatformComponents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component  # noqa: E501

        OperationId: patch_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component  # noqa: E501

        OperationId: patch_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_backplane(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_backplane  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_backplane Data for backplane components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_backplane(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentBackplane body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_backplane_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_backplane_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_backplane_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_backplane  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_backplane Data for backplane components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_backplane_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentBackplane body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_backplane" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_backplane`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_backplane`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/backplane', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_chassis(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_chassis  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_chassis Data for chassis components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_chassis(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentChassis body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_chassis_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_chassis_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_chassis_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_chassis  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_chassis Data for chassis components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_chassis_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentChassis body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_chassis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_chassis`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_chassis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/chassis', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_config(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_config  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_config Configuration data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_config  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_config Configuration data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_cpu(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_cpu  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_cpu Data for cpu components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_cpu(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentCpu body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_cpu_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_cpu_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_cpu_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_cpu  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_cpu Data for cpu components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_cpu_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentCpu body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_cpu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_cpu`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_cpu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/cpu', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_fabric(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_fabric  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_fabric Data for fabric components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_fabric(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentFabric body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_fabric_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_fabric_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_fabric_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_fabric  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_fabric Data for fabric components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_fabric_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentFabric body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_fabric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_fabric`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_fabric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/fabric', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_fan(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_fan  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_fan Data for fan components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_fan(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentFan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_fan_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_fan_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_fan_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_fan  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_fan Data for fan components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_fan_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentFan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_fan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_fan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_fan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/fan', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_integrated_circuit(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_integrated_circuit  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_integrated_circuit Data for chip components, such as ASIC, NPUs, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_integrated_circuit(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentIntegratedCircuit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_integrated_circuit_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_integrated_circuit_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_integrated_circuit_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_integrated_circuit  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_integrated_circuit Data for chip components, such as ASIC, NPUs, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_integrated_circuit_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentIntegratedCircuit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_integrated_circuit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_integrated_circuit`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_integrated_circuit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/integrated-circuit', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_port(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_port  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_port Data for physical port components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_port(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_port_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_port_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_port_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_port  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_port Data for physical port components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_port_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/port', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_power_supply(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_power_supply  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_power_supply Data for power supply components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_power_supply(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentPowerSupply body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_power_supply_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_power_supply_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_power_supply_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_power_supply  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_power_supply Data for power supply components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_power_supply_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentPowerSupply body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_power_supply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_power_supply`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_power_supply`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/power-supply', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_properties(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_properties  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_properties Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_properties(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_properties_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_properties_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_properties_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_properties  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_properties Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_properties_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_properties`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_properties_property(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_properties_property(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PatchOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_properties_property_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_properties_property_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_properties_property_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_properties_property_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PatchOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_properties_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_properties_property`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `patch_openconfig_platform_components_component_properties_property`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_properties_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_properties_property_config(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_properties_property_config  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_properties_property_config Configuration data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_properties_property_config(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PatchOpenconfigPlatformComponentsComponentPropertiesPropertyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_properties_property_config_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_properties_property_config  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_properties_property_config Configuration data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PatchOpenconfigPlatformComponentsComponentPropertiesPropertyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_properties_property_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_properties_property_config`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `patch_openconfig_platform_components_component_properties_property_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_properties_property_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_properties_property_config_value(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_properties_property_config_value(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PatchOpenconfigPlatformComponentsComponentPropertiesPropertyConfigValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_properties_property_config_value_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PatchOpenconfigPlatformComponentsComponentPropertiesPropertyConfigValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_properties_property_config_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `patch_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/config/value', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_storage(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_storage  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_storage Data for storage components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_storage(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentStorage body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_storage_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_storage_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_storage_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_storage  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_storage Data for storage components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_storage_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentStorage body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_storage`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/storage', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_subcomponents(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_subcomponents  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_subcomponents Enclosing container for subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_subcomponents(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentSubcomponents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_subcomponents_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_subcomponents_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_subcomponents_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_subcomponents  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_subcomponents Enclosing container for subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_subcomponents_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PatchOpenconfigPlatformComponentsComponentSubcomponents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_subcomponents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_subcomponents`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_subcomponents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_subcomponents_subcomponent(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_subcomponents_subcomponent(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PatchOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PatchOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_subcomponents_subcomponent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `patch_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_openconfig_platform_components_component_subcomponents_subcomponent_config(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_subcomponents_subcomponent_config  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_subcomponents_subcomponent_config Configuration data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_subcomponents_subcomponent_config(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PatchOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def patch_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """patch_openconfig_platform_components_component_subcomponents_subcomponent_config  # noqa: E501

        OperationId: patch_openconfig_platform_components_component_subcomponents_subcomponent_config Configuration data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PatchOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_openconfig_platform_components_component_subcomponents_subcomponent_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `patch_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `patch_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_platform_components_component(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_platform_components_component  # noqa: E501

        OperationId: post_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_platform_components_component(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_platform_components_component_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_platform_components_component_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_platform_components_component_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_list_openconfig_platform_components_component  # noqa: E501

        OperationId: post_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_platform_components_component_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostListOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_platform_components_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_platform_components_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_platform_components_component_properties_property(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: post_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_platform_components_component_properties_property(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PostListOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_platform_components_component_properties_property_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_platform_components_component_properties_property_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_platform_components_component_properties_property_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: post_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_platform_components_component_properties_property_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PostListOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_platform_components_component_properties_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_list_openconfig_platform_components_component_properties_property`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_platform_components_component_properties_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_openconfig_platform_components_component_subcomponents_subcomponent(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: post_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_platform_components_component_subcomponents_subcomponent(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PostListOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: post_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PostListOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_openconfig_platform_components_component_subcomponents_subcomponent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_list_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_list_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_platform_components_component_config(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_platform_components_component_config  # noqa: E501

        OperationId: post_openconfig_platform_components_component_config Configuration data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_platform_components_component_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PostOpenconfigPlatformComponentsComponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_platform_components_component_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_platform_components_component_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_platform_components_component_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """post_openconfig_platform_components_component_config  # noqa: E501

        OperationId: post_openconfig_platform_components_component_config Configuration data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_platform_components_component_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PostOpenconfigPlatformComponentsComponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_platform_components_component_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_platform_components_component_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_platform_components_component_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_platform_components_component_properties_property_config(self, name, name2, body, **kwargs):  # noqa: E501
        """post_openconfig_platform_components_component_properties_property_config  # noqa: E501

        OperationId: post_openconfig_platform_components_component_properties_property_config Configuration data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_platform_components_component_properties_property_config(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PostOpenconfigPlatformComponentsComponentPropertiesPropertyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_platform_components_component_properties_property_config_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """post_openconfig_platform_components_component_properties_property_config  # noqa: E501

        OperationId: post_openconfig_platform_components_component_properties_property_config Configuration data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PostOpenconfigPlatformComponentsComponentPropertiesPropertyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_platform_components_component_properties_property_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_platform_components_component_properties_property_config`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `post_openconfig_platform_components_component_properties_property_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_platform_components_component_properties_property_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_platform_components_component_properties_property_config_value(self, name, name2, body, **kwargs):  # noqa: E501
        """post_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: post_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_platform_components_component_properties_property_config_value(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PostOpenconfigPlatformComponentsComponentPropertiesPropertyConfigValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_platform_components_component_properties_property_config_value_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """post_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: post_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PostOpenconfigPlatformComponentsComponentPropertiesPropertyConfigValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_platform_components_component_properties_property_config_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `post_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_openconfig_platform_components_component_subcomponents_subcomponent_config(self, name, name2, body, **kwargs):  # noqa: E501
        """post_openconfig_platform_components_component_subcomponents_subcomponent_config  # noqa: E501

        OperationId: post_openconfig_platform_components_component_subcomponents_subcomponent_config Configuration data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_platform_components_component_subcomponents_subcomponent_config(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PostOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def post_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """post_openconfig_platform_components_component_subcomponents_subcomponent_config  # noqa: E501

        OperationId: post_openconfig_platform_components_component_subcomponents_subcomponent_config Configuration data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PostOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_openconfig_platform_components_component_subcomponents_subcomponent_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `post_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_platform_components_component(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_platform_components_component  # noqa: E501

        OperationId: put_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_platform_components_component(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_platform_components_component_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_platform_components_component_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_platform_components_component_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_list_openconfig_platform_components_component  # noqa: E501

        OperationId: put_list_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_platform_components_component_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutListOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_platform_components_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_platform_components_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_platform_components_component_properties_property(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: put_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_platform_components_component_properties_property(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutListOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_platform_components_component_properties_property_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_platform_components_component_properties_property_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_platform_components_component_properties_property_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: put_list_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_platform_components_component_properties_property_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutListOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_platform_components_component_properties_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_list_openconfig_platform_components_component_properties_property`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_platform_components_component_properties_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_list_openconfig_platform_components_component_subcomponents_subcomponent(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: put_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_platform_components_component_subcomponents_subcomponent(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutListOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_list_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: put_list_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_list_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutListOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_list_openconfig_platform_components_component_subcomponents_subcomponent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_list_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_list_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components(self, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components  # noqa: E501

        OperationId: put_openconfig_platform_components Enclosing container for the components in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigPlatformComponents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_with_http_info(self, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components  # noqa: E501

        OperationId: put_openconfig_platform_components Enclosing container for the components in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutOpenconfigPlatformComponents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component  # noqa: E501

        OperationId: put_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component  # noqa: E501

        OperationId: put_openconfig_platform_components_component List of components, keyed by component name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_backplane(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_backplane  # noqa: E501

        OperationId: put_openconfig_platform_components_component_backplane Data for backplane components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_backplane(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentBackplane body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_backplane_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_backplane_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_backplane_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_backplane  # noqa: E501

        OperationId: put_openconfig_platform_components_component_backplane Data for backplane components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_backplane_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentBackplane body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_backplane" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_backplane`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_backplane`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/backplane', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_chassis(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_chassis  # noqa: E501

        OperationId: put_openconfig_platform_components_component_chassis Data for chassis components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_chassis(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentChassis body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_chassis_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_chassis_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_chassis_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_chassis  # noqa: E501

        OperationId: put_openconfig_platform_components_component_chassis Data for chassis components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_chassis_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentChassis body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_chassis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_chassis`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_chassis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/chassis', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_config(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_config  # noqa: E501

        OperationId: put_openconfig_platform_components_component_config Configuration data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_config(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_config_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_config_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_config_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_config  # noqa: E501

        OperationId: put_openconfig_platform_components_component_config Configuration data for each component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_config_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_cpu(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_cpu  # noqa: E501

        OperationId: put_openconfig_platform_components_component_cpu Data for cpu components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_cpu(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentCpu body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_cpu_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_cpu_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_cpu_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_cpu  # noqa: E501

        OperationId: put_openconfig_platform_components_component_cpu Data for cpu components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_cpu_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentCpu body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_cpu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_cpu`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_cpu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/cpu', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_fabric(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_fabric  # noqa: E501

        OperationId: put_openconfig_platform_components_component_fabric Data for fabric components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_fabric(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentFabric body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_fabric_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_fabric_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_fabric_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_fabric  # noqa: E501

        OperationId: put_openconfig_platform_components_component_fabric Data for fabric components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_fabric_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentFabric body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_fabric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_fabric`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_fabric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/fabric', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_fan(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_fan  # noqa: E501

        OperationId: put_openconfig_platform_components_component_fan Data for fan components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_fan(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentFan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_fan_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_fan_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_fan_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_fan  # noqa: E501

        OperationId: put_openconfig_platform_components_component_fan Data for fan components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_fan_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentFan body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_fan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_fan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_fan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/fan', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_integrated_circuit(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_integrated_circuit  # noqa: E501

        OperationId: put_openconfig_platform_components_component_integrated_circuit Data for chip components, such as ASIC, NPUs, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_integrated_circuit(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentIntegratedCircuit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_integrated_circuit_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_integrated_circuit_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_integrated_circuit_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_integrated_circuit  # noqa: E501

        OperationId: put_openconfig_platform_components_component_integrated_circuit Data for chip components, such as ASIC, NPUs, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_integrated_circuit_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentIntegratedCircuit body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_integrated_circuit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_integrated_circuit`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_integrated_circuit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/integrated-circuit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_port(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_port  # noqa: E501

        OperationId: put_openconfig_platform_components_component_port Data for physical port components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_port(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_port_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_port_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_port_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_port  # noqa: E501

        OperationId: put_openconfig_platform_components_component_port Data for physical port components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_port_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentPort body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/port', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_power_supply(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_power_supply  # noqa: E501

        OperationId: put_openconfig_platform_components_component_power_supply Data for power supply components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_power_supply(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentPowerSupply body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_power_supply_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_power_supply_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_power_supply_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_power_supply  # noqa: E501

        OperationId: put_openconfig_platform_components_component_power_supply Data for power supply components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_power_supply_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentPowerSupply body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_power_supply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_power_supply`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_power_supply`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/power-supply', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_properties(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_properties  # noqa: E501

        OperationId: put_openconfig_platform_components_component_properties Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_properties(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_properties_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_properties_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_properties_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_properties  # noqa: E501

        OperationId: put_openconfig_platform_components_component_properties Enclosing container   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_properties_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_properties`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_properties_property(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: put_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_properties_property(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PutOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_properties_property_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_properties_property_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_properties_property_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_properties_property  # noqa: E501

        OperationId: put_openconfig_platform_components_component_properties_property List of system properties for the component  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_properties_property_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PutOpenconfigPlatformComponentsComponentPropertiesProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_properties_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_properties_property`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `put_openconfig_platform_components_component_properties_property`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_properties_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_properties_property_config(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_properties_property_config  # noqa: E501

        OperationId: put_openconfig_platform_components_component_properties_property_config Configuration data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_properties_property_config(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PutOpenconfigPlatformComponentsComponentPropertiesPropertyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_properties_property_config_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_properties_property_config  # noqa: E501

        OperationId: put_openconfig_platform_components_component_properties_property_config Configuration data for each property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_properties_property_config_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PutOpenconfigPlatformComponentsComponentPropertiesPropertyConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_properties_property_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_properties_property_config`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `put_openconfig_platform_components_component_properties_property_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_properties_property_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_properties_property_config_value(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: put_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_properties_property_config_value(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PutOpenconfigPlatformComponentsComponentPropertiesPropertyConfigValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_properties_property_config_value_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_properties_property_config_value  # noqa: E501

        OperationId: put_openconfig_platform_components_component_properties_property_config_value Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_properties_property_config_value_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the property name. (required)
        :param PutOpenconfigPlatformComponentsComponentPropertiesPropertyConfigValue body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_properties_property_config_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `put_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_properties_property_config_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/properties/property={name}/config/value', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_storage(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_storage  # noqa: E501

        OperationId: put_openconfig_platform_components_component_storage Data for storage components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_storage(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentStorage body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_storage_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_storage_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_storage_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_storage  # noqa: E501

        OperationId: put_openconfig_platform_components_component_storage Data for storage components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_storage_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentStorage body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_storage`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/storage', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_subcomponents(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_subcomponents  # noqa: E501

        OperationId: put_openconfig_platform_components_component_subcomponents Enclosing container for subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_subcomponents(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentSubcomponents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_subcomponents_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_subcomponents_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_subcomponents_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_subcomponents  # noqa: E501

        OperationId: put_openconfig_platform_components_component_subcomponents Enclosing container for subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_subcomponents_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param PutOpenconfigPlatformComponentsComponentSubcomponents body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_subcomponents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_subcomponents`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_subcomponents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_subcomponents_subcomponent(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: put_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_subcomponents_subcomponent(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PutOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_subcomponents_subcomponent  # noqa: E501

        OperationId: put_openconfig_platform_components_component_subcomponents_subcomponent List of subcomponent references  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_subcomponents_subcomponent_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PutOpenconfigPlatformComponentsComponentSubcomponentsSubcomponent body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_subcomponents_subcomponent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `put_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_subcomponents_subcomponent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_openconfig_platform_components_component_subcomponents_subcomponent_config(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_subcomponents_subcomponent_config  # noqa: E501

        OperationId: put_openconfig_platform_components_component_subcomponents_subcomponent_config Configuration data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_subcomponents_subcomponent_config(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PutOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, body, **kwargs)  # noqa: E501
            return data

    def put_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(self, name, name2, body, **kwargs):  # noqa: E501
        """put_openconfig_platform_components_component_subcomponents_subcomponent_config  # noqa: E501

        OperationId: put_openconfig_platform_components_component_subcomponents_subcomponent_config Configuration data for the subcomponent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_openconfig_platform_components_component_subcomponents_subcomponent_config_with_http_info(name, name2, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: References the component name (required)
        :param str name2: Reference to the name list key (required)
        :param PutOpenconfigPlatformComponentsComponentSubcomponentsSubcomponentConfig body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name2', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_openconfig_platform_components_component_subcomponents_subcomponent_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `put_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_openconfig_platform_components_component_subcomponents_subcomponent_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'name2' in params:
            path_params['name'] = params['name2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yang-data+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/yang-data+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/openconfig-platform:components/component={name}/subcomponents/subcomponent={name}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
