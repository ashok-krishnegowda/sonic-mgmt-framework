# coding: utf-8

"""
    Sonic Network Management APIs

    Network management Open APIs for Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openconfig_platform_client.models.openconfig_platform_components_openconfigplatformcomponents_config import OpenconfigPlatformComponentsOpenconfigplatformcomponentsConfig  # noqa: F401,E501
from openconfig_platform_client.models.openconfig_platform_components_openconfigplatformcomponents_properties import OpenconfigPlatformComponentsOpenconfigplatformcomponentsProperties  # noqa: F401,E501
from openconfig_platform_client.models.openconfig_platform_components_openconfigplatformcomponents_subcomponents import OpenconfigPlatformComponentsOpenconfigplatformcomponentsSubcomponents  # noqa: F401,E501


class OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'config': 'OpenconfigPlatformComponentsOpenconfigplatformcomponentsConfig',
        'properties': 'OpenconfigPlatformComponentsOpenconfigplatformcomponentsProperties',
        'subcomponents': 'OpenconfigPlatformComponentsOpenconfigplatformcomponentsSubcomponents',
        'chassis': 'object',
        'port': 'object',
        'power_supply': 'object',
        'fan': 'object',
        'fabric': 'object',
        'storage': 'object',
        'cpu': 'object',
        'integrated_circuit': 'object',
        'backplane': 'object'
    }

    attribute_map = {
        'name': 'name',
        'config': 'config',
        'properties': 'properties',
        'subcomponents': 'subcomponents',
        'chassis': 'chassis',
        'port': 'port',
        'power_supply': 'power-supply',
        'fan': 'fan',
        'fabric': 'fabric',
        'storage': 'storage',
        'cpu': 'cpu',
        'integrated_circuit': 'integrated-circuit',
        'backplane': 'backplane'
    }

    def __init__(self, name=None, config=None, properties=None, subcomponents=None, chassis=None, port=None, power_supply=None, fan=None, fabric=None, storage=None, cpu=None, integrated_circuit=None, backplane=None):  # noqa: E501
        """OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._config = None
        self._properties = None
        self._subcomponents = None
        self._chassis = None
        self._port = None
        self._power_supply = None
        self._fan = None
        self._fabric = None
        self._storage = None
        self._cpu = None
        self._integrated_circuit = None
        self._backplane = None
        self.discriminator = None

        self.name = name
        if config is not None:
            self.config = config
        if properties is not None:
            self.properties = properties
        if subcomponents is not None:
            self.subcomponents = subcomponents
        if chassis is not None:
            self.chassis = chassis
        if port is not None:
            self.port = port
        if power_supply is not None:
            self.power_supply = power_supply
        if fan is not None:
            self.fan = fan
        if fabric is not None:
            self.fabric = fabric
        if storage is not None:
            self.storage = storage
        if cpu is not None:
            self.cpu = cpu
        if integrated_circuit is not None:
            self.integrated_circuit = integrated_circuit
        if backplane is not None:
            self.backplane = backplane

    @property
    def name(self):
        """Gets the name of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The name of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param name: The name of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def config(self):
        """Gets the config of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The config of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: OpenconfigPlatformComponentsOpenconfigplatformcomponentsConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param config: The config of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: OpenconfigPlatformComponentsOpenconfigplatformcomponentsConfig
        """

        self._config = config

    @property
    def properties(self):
        """Gets the properties of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The properties of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: OpenconfigPlatformComponentsOpenconfigplatformcomponentsProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param properties: The properties of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: OpenconfigPlatformComponentsOpenconfigplatformcomponentsProperties
        """

        self._properties = properties

    @property
    def subcomponents(self):
        """Gets the subcomponents of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The subcomponents of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: OpenconfigPlatformComponentsOpenconfigplatformcomponentsSubcomponents
        """
        return self._subcomponents

    @subcomponents.setter
    def subcomponents(self, subcomponents):
        """Sets the subcomponents of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param subcomponents: The subcomponents of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: OpenconfigPlatformComponentsOpenconfigplatformcomponentsSubcomponents
        """

        self._subcomponents = subcomponents

    @property
    def chassis(self):
        """Gets the chassis of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The chassis of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: object
        """
        return self._chassis

    @chassis.setter
    def chassis(self, chassis):
        """Sets the chassis of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param chassis: The chassis of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: object
        """

        self._chassis = chassis

    @property
    def port(self):
        """Gets the port of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The port of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: object
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param port: The port of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: object
        """

        self._port = port

    @property
    def power_supply(self):
        """Gets the power_supply of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The power_supply of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: object
        """
        return self._power_supply

    @power_supply.setter
    def power_supply(self, power_supply):
        """Sets the power_supply of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param power_supply: The power_supply of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: object
        """

        self._power_supply = power_supply

    @property
    def fan(self):
        """Gets the fan of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The fan of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: object
        """
        return self._fan

    @fan.setter
    def fan(self, fan):
        """Sets the fan of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param fan: The fan of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: object
        """

        self._fan = fan

    @property
    def fabric(self):
        """Gets the fabric of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The fabric of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: object
        """
        return self._fabric

    @fabric.setter
    def fabric(self, fabric):
        """Sets the fabric of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param fabric: The fabric of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: object
        """

        self._fabric = fabric

    @property
    def storage(self):
        """Gets the storage of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The storage of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: object
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param storage: The storage of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: object
        """

        self._storage = storage

    @property
    def cpu(self):
        """Gets the cpu of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The cpu of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: object
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param cpu: The cpu of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: object
        """

        self._cpu = cpu

    @property
    def integrated_circuit(self):
        """Gets the integrated_circuit of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The integrated_circuit of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: object
        """
        return self._integrated_circuit

    @integrated_circuit.setter
    def integrated_circuit(self, integrated_circuit):
        """Sets the integrated_circuit of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param integrated_circuit: The integrated_circuit of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: object
        """

        self._integrated_circuit = integrated_circuit

    @property
    def backplane(self):
        """Gets the backplane of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501


        :return: The backplane of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :rtype: object
        """
        return self._backplane

    @backplane.setter
    def backplane(self, backplane):
        """Sets the backplane of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.


        :param backplane: The backplane of this OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent.  # noqa: E501
        :type: object
        """

        self._backplane = backplane

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenconfigPlatformComponentsOpenconfigplatformcomponentsComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
